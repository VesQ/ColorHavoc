//********************************************************************************
// Utils.cb
//
// Yleisiä funktioita
//********************************************************************************

//===============================================================================
// Binäärioperaatioita (by Bagard)
//===============================================================================
Function BinAnd(luku1, luku2)
    For i = 0 To 31
        luku3 = luku3 + (((luku1 Shr i) Mod 2) And ((luku2 Shr i) Mod 2)) Shl i
    Next i
    Return luku3
End Function
 
Function BinNot(luku1)
    For i = 0 To 31
        luku3 = luku3 + (Not ((luku1 Shr i) Mod 2)) Shl i
    Next i
    Return luku3
End Function
 
Function BinXor(luku1, luku2)
    For i = 0 To 31
        luku3 = luku3 + (((luku1 Shr i) Mod 2) Xor ((luku2 Shr i) Mod 2)) Shl i
    Next i
    Return luku3
End Function
 
Function BinOr(luku1, luku2)
    For i = 0 To 31
        luku3 = luku3 + (((luku1 Shr i) Mod 2) Or ((luku2 Shr i) Mod 2)) Shl i
    Next i
    Return luku3
End Function


//===============================================================================
// Tuplaklikkaus
//================================================================================

Global gDoubleClickTimer
gDoubleClickTimer = 0
Function MouseDoubleClick( button=1 )
    If MouseUp(button)
        If gDoubleClickTimer > Timer() Then
            gDoubleClickTimer = 0
            Return True
        Else
            gDoubleClickTimer = Timer() + 500
        EndIf
    EndIf
    Return False
EndFunction 

//===============================================================================
// MouseOver-funktio [ ProgrammerOfDSG ]
// -----------------------------
// Tarkistaa, onko hiiri suorakulmion muotoisen alueen päällä.
// * Funktion parametrit:
//   - 1&2: Vasemman ylänurkan ruudun koordinaatit
//   -   3: Suorakulmion leveys
//   -   4: Suorakulmion pituus
// * Funktio palauttaa 1, jos hiiri on alueen päällä, muutoin 0.
//===============================================================================
Function MouseOver(x,y,w,h)'x ja y akseli, w leveys, h pituus.
    Return (MouseX() > x And MouseY() > y And Mousex() < x + w And Mousey() < y + h)
EndFunction 

//===============================================================================
// Objektien koordinaatit ruudulla
//===============================================================================
Function ObjectSX(obj)
    Return ObjectX(obj)+ScreenWidth()/2
EndFunction

Function ObjectSY(obj)
    Return -ObjectY(obj)+ScreenHeight()/2
EndFunction

//===============================================================================
// Luo CB:n omaa Input()-funktiota muistuttavan syötteen. Tekstissä voi liikkua 
// nuolinäppäimillä, myös home- ja end-näppäimet toimivat.
// ------
// ActiveInput()  
//   - Palauttaa nykyisen aktiivisen syötteen.
// ActiveInput(mem) 
//   - Asettaa syötteen "mem" aktiiviseksi.
// NewInput()
//   - Luo uuden syötteen ja palauttaa sen osoitteen muita funktiota varten.
// SetInput2Position(mem, pos)
//   - Asettaa syötteen "mem" kursorin kohtaan "pos".
// Input2(mem, txt, x, y, maxlen)
//   - Hoitaa varsinaisen syötteen. "mem" on syötteen osoite, "txt" piirtää
//     tekstiä syötteeseen, "x" ja "y" ovat syötteen koordinaatit, "maxlen"
//     on syötteen maksimipituus.
//   - Palauttaa syötteen sisällön. Palautusarvo annetaan normaalisti "txt"
//     parametriin takaisin.
//===============================================================================

Global __InputActive
Function ActiveInput(mem=0)
    If mem=0 Then Return __InputActive
    __InputActive = mem
End Function

Function NewInput()
    tmpmem = MakeMEMBlock(27)
    __InputActive=tmpmem
    PokeInt tmpmem,23,TextHeight("I")
    Return tmpmem
End Function

Function SetInput2Position(datmem,pos)
    PokeInt datmem,4,pos
EndFunction

Function Input2$(datmem,txt$,x,y,maxlen=0)
    aika=Timer()
    active=(datmem=__InputActive)
    h=PeekInt(datmem,23)
    mx=MouseX():my=MouseY()
    blink = PeekInt(datmem,0)
    curpos = Max(PeekInt(datmem,4),0)
    exs = PeekInt(datmem,9)
    exc = PeekByte(datmem,13)
    delay = PeekInt(datmem,14)
    del = PeekByte(datmem,18)
    blinkkaa=Not PeekByte(datmem,8)
    mleft=4
    mtop=2
    riviväli=15
    If active Then
        For i=0 To 220
            tmp=tmp+(i^2)*KeyDown(i)
        Next i
        If tmp<>exs Then exc=0:delay=0:del=0
        k = GetKey()
        If KeyHit(181) Then k=47
        numpad=0
        For i=71 To 83
            If i=78 Or i=74 Then i+1
            If KeyHit(i) Then numpad=i Then Exit
        Next i
        If numpad Then
            Select numpad
                Case 83:k=44
                Case 82:k=48
                Case 79:k=49
                Case 80:k=50
                Case 81:k=51
                Case 75:k=52
                Case 76:k=53
                Case 77:k=54
                Case 71:k=55
                Case 72:k=56
                Case 73:k=57
            End Select
        EndIf
        If k Then
            exc=k:delay=0:del=0:blink=aika+500:blinkkaa=False:PokeInt datmem,0,blink:PokeByte datmem,8,blinkkaa
        EndIf
        txtlen=Len(txt)
        If (exc>31 And (exc<127 Or exc>159) And ((((tmp=exs) And tmp<>0) And aika>delay) Or k)) And (exc<>45 Or KeyDown(181)=0) Then
            If del=0 Then delay=aika+400:del=1 Else delay=aika+20
            txt=StrInsert(txt,curpos,Chr(exc))
            curpos=curpos+1
            blinkkaa=True
        ElseIf (exc=8 Or exc=127) And curpos>0 And (aika>delay Or k) Then
            If del=0 Then delay=aika+400:del=1 Else delay=aika+20
            If exc=127 Then
                ttt=curpos
                For i=curpos To 1 Step -1
                    a=Asc(Mid(txt,i,1))
                    If ((a<48 Or (a>57 And a<65) Or (a>90 And a<97) Or (a>122 And a<192)) And a<>39) Then
                        If i=ttt Then txt=StrRemove(txt,i,1):curpos-1
                        Exit
                    EndIf
                    txt=StrRemove(txt,i,1)
                    curpos-1
                Next i
            Else
                txt=StrRemove(txt,curpos,1)
                curpos-1
            EndIf
            blinkkaa=True
        ElseIf exc=4 And (aika>delay Or k) Then
            If del=0 Then delay=aika+400:del=1 Else delay=aika+20
            If curpos<txtlen Then txt=StrRemove(txt,curpos+1,1)
            blinkkaa=True
        ElseIf k=2 Then
            curpos=txtlen
        ElseIf k=1 Then
            curpos=0
        ElseIf (exc=30 Or exc=31) And (aika>delay Or k) Then
            If del=0 Then delay=aika+400:del=1 Else delay=aika+20
            blinkkaa=True
            curpos=Min(Max(curpos+(exc=30)-(exc=31),0),txtlen)
        EndIf
    EndIf
    If aika>blink Then
        PokeInt datmem,0,aika+500
        PokeByte datmem,8,blinkkaa
    EndIf
    txtlen=Len(txt)
    If txtlen>maxlen Then txt=Left(txt,32) : curpos-1
    exs=tmp
    offset=1
    Text x+mleft,y+mtop,txt
    If blinkkaa And active Then
        ww=TextWidth(Mid(txt,offset,(curpos-offset)+1))
        Text x+mleft+ww,y+mtop,"_"
    EndIf
    PokeInt datmem,4,curpos
    PokeInt datmem,9,exs
    PokeByte datmem,13,exc
    PokeInt datmem,14,delay
    PokeByte datmem,18,del
    Return txt
EndFunction 

//==================================================================
// MD5-funktio [ Bagard ]
// * Pohjana käytetty Craig Kiesaun Blitzille tehtyä MD5-funktiota:
//   http://www.blitzbasic.com/codearcs/codearcs.php?code=278
// -----------------------------
// Luo merkkijonosta MD5-tarkistussumman (hashin). Hashattua
// merkkijonoa ei voida palauttaa alkuperäiseksi. Funktio on
// hyödyllinen esim. salasanojen tallentamisessa.
// * Funktion ottaa parametrikseen hashattavan merkkijonon
// * Funktio palauttaa valmiin MD5-hashin.
// * Apufunktiot funktion omaan käyttöön:
//   - MD5_F
//   - MD5_G
//   - MD5_H
//   - MD5_I
//   - MD5_FF
//   - MD5_GG
//   - MD5_HH
//   - MD5_II
//   - RotateLeft
//   - WordToHex
//   - Bin2Dec
//==================================================================
Function MD5(jono$)

    nblk = ((Len(jono$) + 8) Shr 6) + 1

    Dim MD5_x(nblk * 16 - 1)

    For i = 0 To nblk * 16 - 1
        MD5_x(i) = 0
    Next i

    For i = 0 To (Len(jono$) - 1)
        MD5_x(i Shr 2) = BinOr(MD5_x(i Shr 2), (Asc(Mid(jono$, (i + 1), 1)) Shl ((i Mod 4) * 8)))
    Next i

    MD5_x(i Shr 2) = BinOr(MD5_x(i Shr 2), (128 Shl (((i) Mod 4) * 8)))
    MD5_x(nblk * 16 - 2) = Len(jono$) * 8

    MD5_a = 1732584193 //&H67452301
    MD5_b = -271733879 //&HEFCDAB89
    MD5_c = -1732584194 //&H98BADCFE
    MD5_d = 271733878 //&H10325476

    // Käydään sanat läpi
    For k = 0 To (nblk * 16 - 1) Step 16
        MD5_AA = MD5_a
        MD5_BB = MD5_b
        MD5_CC = MD5_c
        MD5_DD = MD5_d

        // Kierros 1
        MD5_a = MD5_FF(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 0), 7, -680876936) //&HD76AA478
        MD5_d = MD5_FF(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 1), 12, -389564586) //&HE8C7B756
        MD5_c = MD5_FF(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 2), 17, 606105819 )//&H242070DB
        MD5_b = MD5_FF(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 3), 22, -1044525330) //&HC1BDCEEE
        MD5_a = MD5_FF(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 4), 7, -176418897) //&HF57C0FAF
        MD5_d = MD5_FF(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 5), 12, 1200080426 )//&H4787C62A
        MD5_c = MD5_FF(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 6), 17, -1473231341) //&HA8304613
        MD5_b = MD5_FF(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 7), 22, -45705983) //&HFD469501
        MD5_a = MD5_FF(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 8), 7, 1770035416) //&H698098D8
        MD5_d = MD5_FF(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 9), 12, -1958414417 )//&H8B44F7AF
        MD5_c = MD5_FF(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 10), 17, -42063 )//&HFFFF5BB1
        MD5_b = MD5_FF(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 11), 22, -1990404162) //&H895CD7BE
        MD5_a = MD5_FF(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 12), 7, 1804603682) //&H6B901122
        MD5_d = MD5_FF(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 13), 12, -40341101) //&HFD987193
        MD5_c = MD5_FF(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 14), 17, -1502002290) //&HA679438E
        MD5_b = MD5_FF(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 15), 22, 1236535329) //&H49B40821

        // Kierros 2
        MD5_a = MD5_GG(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 1), 5, -165796510) //&HF61E2562
        MD5_d = MD5_GG(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 6), 9, -1069501632) //&HC040B340
        MD5_c = MD5_GG(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 11), 14, 643717713) //&H265E5A51
        MD5_b = MD5_GG(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 0), 20, -373897302) //&HE9B6C7AA
        MD5_a = MD5_GG(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 5), 5, -701558691) //&HD62F105D
        MD5_d = MD5_GG(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 10), 9, 38016083) //&H2441453
        MD5_c = MD5_GG(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 15), 14, -660478335) //&HD8A1E681
        MD5_b = MD5_GG(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 4), 20, -405537848) //&HE7D3FBC8
        MD5_a = MD5_GG(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 9), 5, 568446438) //&H21E1CDE6
        MD5_d = MD5_GG(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 14), 9, -1019803690) //&HC33707D6
        MD5_c = MD5_GG(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 3), 14, -187363961) //&HF4D50D87
        MD5_b = MD5_GG(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 8), 20, 1163531501) //&H455A14ED
        MD5_a = MD5_GG(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 13), 5, -1444681467) //&HA9E3E905
        MD5_d = MD5_GG(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 2), 9, -51403784) //&HFCEFA3F8
        MD5_c = MD5_GG(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 7), 14, 1735328473) //&H676F02D9
        MD5_b = MD5_GG(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 12), 20, -1926607734) //&H8D2A4C8A

        // Kierros 3
        MD5_a =  MD5_HH(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 5), 4, -378558) //&HFFFA3942
        MD5_d =  MD5_HH(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 8), 11, -2022574463) //&H8771F681
        MD5_c = MD5_HH(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 11), 16, 1839030562) //&H6D9D6122
        MD5_b = MD5_HH(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 14), 23, -35309556) //&HFDE5380C
        MD5_a =  MD5_HH(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 1), 4, -1530992060) //&HA4BEEA44
        MD5_d = MD5_HH(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 4), 11, 1272893353) //&H4BDECFA9
        MD5_c = MD5_HH(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 7), 16, -155497632) //&HF6BB4B60
        MD5_b = MD5_HH(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 10), 23, -1094730640) //&HBEBFBC70
        MD5_a = MD5_HH(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 13), 4, 681279174) //&H289B7EC6
        MD5_d = MD5_HH(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 0), 11, -358537222) //&HEAA127FA
        MD5_c = MD5_HH(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 3), 16, -722521979) //&HD4EF3085
        MD5_b = MD5_HH(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 6), 23, 76029189) //&H4881D05
        MD5_a = MD5_HH(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 9), 4, -640364487) //&HD9D4D039
        MD5_d = MD5_HH(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 12), 11, -421815835) //&HE6DB99E5
        MD5_c = MD5_HH(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 15), 16, 530742520) //&H1FA27CF8
        MD5_b = MD5_HH(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 2), 23, -995338651) //&HC4AC5665

        // Kierros 4
        MD5_a = MD5_II(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 0), 6, -198630844) //&HF4292244
        MD5_d = MD5_II(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 7), 10, 1126891415) //&H432AFF97
        MD5_c = MD5_II(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 14), 15, -1416354905) //&HAB9423A7
        MD5_b = MD5_II(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 5), 21, -57434055) //&HFC93A039
        MD5_a = MD5_II(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 12), 6, 1700485571) //&H655B59C3
        MD5_d = MD5_II(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 3), 10, -1894986606) //&H8F0CCC92
        MD5_c = MD5_II(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 10), 15, -1051523) //&HFFEFF47D
        MD5_b = MD5_II(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 1), 21, -2054922799) //&H85845DD1
        MD5_a = MD5_II(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 8), 6, 1873313359) //&H6FA87E4F
        MD5_d = MD5_II(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 15), 10, -30611744) //&HFE2CE6E0
        MD5_c = MD5_II(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 6), 15, -1560198380 )//&HA3014314
        MD5_b = MD5_II(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 13), 21, 1309151649) //&H4E0811A1
        MD5_a = MD5_II(MD5_a, MD5_b, MD5_c, MD5_d, MD5_x(k + 4), 6, -145523070) //&HF7537E82
        MD5_d = MD5_II(MD5_d, MD5_a, MD5_b, MD5_c, MD5_x(k + 11), 10, -1120210379) //&HBD3AF235
        MD5_c = MD5_II(MD5_c, MD5_d, MD5_a, MD5_b, MD5_x(k + 2), 15, 718787259) //&H2AD7D2BB
        MD5_b = MD5_II(MD5_b, MD5_c, MD5_d, MD5_a, MD5_x(k + 9), 21, -343485551) //&HEB86D391

        MD5_a = MD5_a + MD5_AA
        MD5_b = MD5_b + MD5_BB
        MD5_c = MD5_c + MD5_CC
        MD5_d = MD5_d + MD5_DD
    Next k

    Return Lower(Str(WordToHex(MD5_a)) + Str(WordToHex(MD5_b)) + Str(WordToHex(MD5_c)) + Str(WordToHex(MD5_d)))
End Function


Function MD5_F(x, y, z)
    Return BinOr(BinAnd(x, y), BinAnd(BinNot(x), z))
End Function

Function MD5_G(x, y, z)
    Return BinOr(BinAnd(x, z), BinAnd(y, BinNot(z)))
End Function

Function MD5_H(x, y, z)
    Return BinXor(BinXor(x, y), z)
End Function

Function MD5_I(x, y, z)
    Return BinXor(y, BinOr(x, BinNot(z)))
End Function

Function MD5_FF(a, b, c, d, x, s, ac)
    a = (a + ((MD5_F(b, c, d)+ x)+ ac))
    a = RotateLeft(a, s)
    Return a + b
End Function

Function MD5_GG(a, b, c, d, x, s, ac)
    a = (a + ((MD5_G(b, c, d) + x) + ac))
    a = RotateLeft(a, s)
    Return a + b
End Function

Function MD5_HH(a, b, c, d, x, s, ac)
    a = (a + ((MD5_H(b, c, d) + x) + ac))
    a = RotateLeft(a, s)
    Return a + b
End Function

Function MD5_II(a, b, c, d, x, s, ac)
    a = (a + ((MD5_I(b, c, d) + x) + ac))
    a = RotateLeft(a, s)
    Return a + b
End Function

Function RotateLeft(lValue, iShiftBits)
    Return BinOr(lValue Shl iShiftBits, lValue Shr (32 - iShiftBits))
End Function

Function WordToHex(lValue)
    For lCount = 0 To 3
        lByte = BinAnd(lValue Shr lCount * 8, 255)
        ToHex$ = ToHex$ + Right("0" + Hex(lByte), 2)
    Next lCount
    Return ToHex$
End Function

Function Bin2Dec(jono$)
    For i = Len(jono$) To 1 Step -1
        arvo = Int(Mid(jono$, i, 1))
        If arvo = 1 Then
            luku = luku + 2 ^ (Len(jono$) - i)
        EndIf
    Next i
    Return luku
End Function 
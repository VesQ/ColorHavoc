//********************************************************************************
// Game.cb
//
// Varsinaisen pelin mekaniikka
//********************************************************************************



//================================================================================
// Pelin p‰‰silmukka
//================================================================================
Function StartGame()

    // Alustetaan kartta.
    InitializeGameMap()
    
    // Muuttuja, joka sis‰lt‰‰ tiedon saako raiteita muokkailla, eli onko junien
    // liikutus k‰ynniss‰.
    allowEditing = True
    
    Repeat
        // Piirret‰‰n taustakuva pelialueelle
        DrawImage GUIIMAGES( GUI_GAMEAREA ), BORDERSIZE, BORDERSIZE
        
        If allowEditing Then
            ClsColor 64,0,0
            
            // Muokataan hiirell‰ raiteita.
            EditGameMap()
            
            // Piirret‰‰n raiteet ruudulle ja tarkistetan samalla hiiren
            // klikkaukset (alla oleva raide p‰‰lle ja raiteiden poisto).
            doubleClicked = MouseDoubleClick()
            For x=0 To MAPSIZE-1
                For y=0 To MAPSIZE-1
                    If TileType(x,y) = TILE_TRACK And MouseOverTile(x,y) Then
                        If doubleClicked Then
                            // Jos tuplaklikattiin ja hiiri on juuri t‰m‰n laatan p‰‰ll‰,
                            // niin vaihdetaan p‰‰ll‰ ja alla olevat laatat kesken‰‰n.
                            // Tarkistetaan kuitenkin ett‰ paikalla on kaksi laattaa ylip‰‰ns‰.
                            If RAILS(x,y,RAIL_UNDER)<>TR_EMPTY Then
                                tmp = RAILS(x,y,RAIL_TOP)
                                RAILS(x,y,RAIL_TOP) = RAILS(x,y,RAIL_UNDER)
                                RAILS(x,y,RAIL_UNDER) = tmp
                            EndIf
                        ElseIf MouseUp(2) Then
                            // Hiiren kakkospainiketta (yleens‰ oikeata) painiketta painettiin.
                            // Poistetaan hiiren alla oleva tile.
                            DeleteTrack(x,y)
                        EndIf
                    EndIf
                    
                    // Piirret‰‰n palanen n‰ytˆlle
                    DrawTrack(x,y)
                Next y
            Next x
            
        Else
            ClsColor 0,0,0
            
            // Piirret‰‰n raiteet.
            For x=0 To MAPSIZE-1
                For y=0 To MAPSIZE-1
                    DrawTrack( x, y )
                Next y
            Next x
        EndIf
        
        // Enter-n‰pp‰imell‰ laitetaan junat liikkeelle / poistetaan junat.
        If KeyHit( cbKeyReturn ) Then
            // Vaihdetaan muokkauksen salliminen.
            allowEditing = Not allowEditing
            
            If allowEditing Then
                // Jos muokkaus sallitaan, poistetaan olemassa olevat junat kokoelmasta.
                For tr.TRAINS = Each TRAINS
                    DeleteObject tr\obj
                    Delete tr
                Next tr
            Else
                // Muulloin asetetaan junat paikoilleen alkupisteisiins‰.
                PlaceTrains()
            EndIf
        EndIf
        
        // Piirret‰‰n objektit (junat) raiteiden j‰lkeen ja ennen kartan palasia.
        'DrawGame
        
        // Piirret‰‰n kartan palaset.
        DrawBlocks()
        
        DrawScreen
    Until EscapeKey() Or KeyHit(cbKeyQ)
    
    Return True
    
EndFunction

//================================================================================
// Raiteiden piirto karttaan.
//================================================================================
Function EditGameMap()
    // Tarkistetaan hiirell‰ piirto
    blockType = checkRailDraws()
    
    // Jos tapahtui muutos, niin poistetaan muokatun tilen toisarvoinen raide
    // ja asetetaan nykyinen raide toisarvoiseksi. Uusi raite ensiarvoiseksi.
    // MUTTA vain jos uusi block ei ole sama kuin jo nyt p‰‰ll‰ oleva.
    If blockType<>False Then
        If blockType <> RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) Then
            // Ei muuteta palasia, jos edellinen palanen on jo x-risteys ja uusi palanen olisi suora.
            If Not ( ( blockType = TR_VERTICAL Or blockType = TR_HORIZONTAL ) And RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = TR_XCROSS )
                // Tarkistetaan, tekeekˆ uusi raide vanhan kanssa x-risteyksen.
                If blockType = TR_VERTICAL And RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = TR_HORIZONTAL Then
                    RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = TR_XCROSS
                    RAILS( gEditedTileX, gEditedTileY, RAIL_UNDER ) = TR_XCROSS
                ElseIf blockType = TR_HORIZONTAL And RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = TR_VERTICAL Then
                    RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = TR_XCROSS
                    RAILS( gEditedTileX, gEditedTileY, RAIL_UNDER ) = TR_XCROSS
                ElseIf RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = TR_XCROSS Then
                    // Jos vanha raide on X-risteys ja uusi raide on mutka, poistetaan X-risteys ja j‰tet‰‰n vain mutka.
                    RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = blockType
                    RAILS( gEditedTileX, gEditedTileY, RAIL_UNDER ) = TR_EMPTY
                Else
                    // Muuten vain siirret‰‰n vanha pala alle ja laitetaan uusi palanen p‰‰lle.
                    RAILS( gEditedTileX, gEditedTileY, RAIL_UNDER ) = RAILS( gEditedTileX, gEditedTileY, RAIL_TOP )
                    RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = blockType
                EndIf
            EndIf
        EndIf
    EndIf
EndFunction

//================================================================================
// Hieman monimutkainen funktio uuden raiteen selvitt‰miseksi. Uuden palasen
// koordinaatit tallennetaan muuttujiin gEditedTileX ja gEditTileY.
// Funktio tarvitsee avukseen useita globaaleia, koska se on v‰h‰n purkkainen.
// gCNT-alkuiset globaalit ovat funktion sis‰iseen k‰yttˆˆn tarkoitetut.
// Funktiota pit‰‰ kutsua joka loopin kierros.
// -> Funktio palauttaa uuden palasen vakion arvon.
//================================================================================
Global gCNTtileX, gCNTtileY, gCNTstartTileX, gCNTstartTileY
Global gCNTstartX, gCNTstartY, gCNTendX, gCNTendY
Global gEditedTileX, gEditedTileY

Function CheckRailDraws()
    
    gCNTtileX = (MouseX()-BORDERSIZE)/64
    gCNTtileY = (MouseY()-BORDERSIZE)/64
    
    gCNTtileX = Min(Max(gCNTtileX,0),MAPSIZE-1)
    gCNTtileY = Min(Max(gCNTtileY,0),MAPSIZE-1)
    
    If MouseDown(1)
        If gCNTstartTileX=-1 Or gCNTstartTileY=-1 Then gCNTstartTileX=gCNTtileX : gCNTstartTileY=gCNTtileY
        For x2=Max(Min(RoundDown(MouseX()/64)-1,10),0) To Max(Min(RoundDown(MouseX()/64)+1,10),0)
            For y2=Max(Min(RoundDown(MouseY()/64)-1,10),0) To Max(Min(RoundDown(MouseY()/64)+1,10),0)
                For i=0 To 1
                    If GLUEPOINTS(x2,y2,i,0) >= BORDERSIZE And GLUEPOINTS(x2,y2,i,1) >= BORDERSIZE Then
                        If Distance(MouseX(),MouseY(),GLUEPOINTS(x2,y2,i,0),GLUEPOINTS(x2,y2,i,1))<TILESIZE/4 Then 
                            If gCNTstartX=-1 Then
                                gCNTstartX=GLUEPOINTS(x2,y2,i,0)
                                gCNTstartY=GLUEPOINTS(x2,y2,i,1)
                            ElseIf gCNTendX=-1 Or gCNTendX=gCNTstartX
                                gCNTendX=GLUEPOINTS(x2,y2,i,0)
                                gCNTendY=GLUEPOINTS(x2,y2,i,1)
                            EndIf
                        EndIf
                    EndIf
                Next i
            Next y2
        Next x2
        
        If gCNTtileX<>gCNTstartTileX Or gCNTtileY<>gCNTstartTileY Then
            gCNTstartX=-1 : gCNTstartY=-1 : gCNTendX=-1 : gCNTendY=-1 : gCNTstartTileX=-1 : gCNTstartTileY=-1
        EndIf
        
        If gCNTstartX<>-1 And gCNTendX<>-1 Then
            'Color cbYellow
            'Line gCNTstartX,gCNTstartY,gCNTendX,gCNTendY
            angle = GetAngle( gCNTstartX, gCNTstartY, gCNTendX, gCNTendY )
            blockCheck = gCNTstartX - gCNTstartTileX*64 - BORDERSIZE
            If ( gCNTstartX <> gCNTendX ) Or ( gCNTstartY <> gCNTendY ) Then
                block = TR_EMPTY
                If gCNTstartX = gCNTendX Then
                    block = TR_VERTICAL
                ElseIf gCNTstartY = gCNTendY Then
                    block = TR_HORIZONTAL
                ElseIf angle=315 Then
                    If blockCheck=0 Then
                        block = TR_BOTTOMLEFT
                    Else
                        block = TR_TOPRIGHT
                    EndIf
                ElseIf angle=135 Then
                    If blockCheck=32 Then
                        block = TR_BOTTOMLEFT
                    Else
                        block = TR_TOPRIGHT
                    EndIf
                ElseIf angle=225 Then
                    If blockCheck=32 Then
                        block = TR_TOPLEFT
                    Else
                        block = TR_BOTTOMRIGHT
                    EndIf
                ElseIf angle=45 Then
                    If blockCheck=0 Then
                        block = TR_TOPLEFT
                    Else
                        block = TR_BOTTOMRIGHT
                    EndIf
                EndIf
            EndIf
        EndIf
        
    Else 
        gCNTstartX=-1 : gCNTstartY=-1 : gCNTendX=-1 : gCNTendY=-1 : gCNTstartTileX=-1 : gCNTstartTileY=-1
    EndIf
    
    If block<>TR_EMPTY Then
        gEditedTileX = gCNTtileX
        gEditedTileY = gCNTtileY
        Return block
    Else
        Return False
    EndIf
    
EndFunction 

//================================================================================
// Kartan alustus
//================================================================================
Function InitializeGameMap()
    // Tyhjennet‰‰n kartta
    For x=0 To MAPSIZE-1
        For y=0 To MAPSIZE-1
            RAILS(x,y,RAIL_TOP) = TR_EMPTY
            RAILS(x,y,RAIL_UNDER) = TR_EMPTY
        Next y
    Next x
    
    // Rakennetaan testikartta
    // AddBlock( _tileX, _tileY, _type, _color$, _directions, _img=0, _ptr=0 )
    AddBlock( 0, 0, TILE_START, ""+TR_GREEN, 2 )
    AddBlock( 6, 0, TILE_FINISH, ""+TR_GREEN, 8 )
    
    RAILS( 1, 0, RAIL_TOP ) = TR_HORIZONTAL
    RAILS( 2, 0, RAIL_TOP ) = TR_HORIZONTAL
    RAILS( 3, 0, RAIL_TOP ) = TR_HORIZONTAL
    RAILS( 4, 0, RAIL_TOP ) = TR_HORIZONTAL
    RAILS( 5, 0, RAIL_TOP ) = TR_HORIZONTAL
EndFunction 

//================================================================================
// Junien asentaminen paikoilleen.
//================================================================================
Function PlaceTrains()
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        If sb\blockType = TILE_START Then
            // Asetetaan uusi juna samoihin koordinaatteihin kuin alkupalanen,
            // ja k‰‰nnet‰‰n se osoittamaan alkupalasen suuntaa.
            newTrain.TRAINS = New(TRAINS)
            newTrain\trainColor = Int( GetWord( sb\blockColors, 1 ) )
            newTrain\obj = CloneObject( TRAINOBJECTS( newTrain\trainColor ) )
            
            xPos = sb\tileX * TILESIZE + BORDERSIZE + TILESIZE/2
            yPos = sb\tileY * TILESIZE + BORDERSIZE + TILESIZE/2
            ScreenPositionObject newTrain\obj, xPos, yPos
            
            // Junan k‰‰nt‰minen
            If sb\directions = 1 Then
                // Ylˆs
                RotateObject newTrain\obj, 90
            ElseIf sb\directions = 2 Then
                // Oikealle
                RotateObject newTrain\obj, 0
            ElseIf sb\directions = 4 Then
                // Alas
                RotateObject newTrain\obj, 270
            ElseIf sb\directions = 8 Then
                // Vasemmalle
                RotateObject newTrain\obj, 180
            EndIf
        EndIf
    Next sb
EndFunction 
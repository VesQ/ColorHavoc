//********************************************************************************
// Game.cb
//
// Varsinaisen pelin mekaniikka
//********************************************************************************

// Kokoelma junia varten.
Type TRAINS
    Field obj         // Junan objekti
    Field trainColor  // V‰ri
EndType

// Vakio, joka kertoo kuinka paljon suurempi nopeus t‰ytyy junilla olla kaarteissa,
// jotta ne pysyisiv‰t suoralla menevien per‰ss‰. Arvo: PII / 2
Const HALF_PI# = 1.5707963267948966192313216916398

// Taulukko, joka sis‰lt‰‰ etuk‰teen ladatut kuvat alkupalikoiden kaikista vaiheista.
Dim GAME_PRELOADEDSTARTS( MAPSIZE-1, MAPSIZE-1, 9 )

//================================================================================
// Pelin p‰‰silmukka
//================================================================================
Function StartGame()

    // Alustetaan kartta.
    InitializeMap()
    
    // Alustetaan raiteet
    InitializeTracks()
    
    // Muuttuja, joka sis‰lt‰‰ tiedon saako raiteita muokkailla, eli onko junien
    // liikutus k‰ynniss‰.
    allowEditing = True
    
    // Vaihdetaanko muokkausmoodiin/liikutusmoodiin.
    changeMode = False
    
    // Junien liikkeiden nopeuden kerroin
    speedFactor# = 0.1
    
    // Kuinka paljon ollaan liikutu yhden ruudun aikana.
    // Kun t‰t‰ muuttujaa verrataan TILESIZE-vakioon, saadaan
    // tieto, milloin kaikkien junien tulisi olla mennyt yhden
    // laatan verran eteenp‰in. T‰m‰ muuttuja pit‰‰ nollata
    // aina kun junat ovat kulkeneet yhden ruudun verran.
    movedInTile# = 0.0
    
    // FPS-riippumaton liike
    oldTime = Timer()
    passedTime = 0
    Repeat
        // Piirret‰‰n taustakuva pelialueelle
        DrawImage GUIIMAGES( GUI_GAMEAREA ), BORDERSIZE, BORDERSIZE
        
        If allowEditing Then
            ClsColor 64,0,0
            
            // Muokataan hiirell‰ raiteita.
            GameEditMap()
            
            // Piirret‰‰n raiteet ruudulle ja tarkistetan samalla hiiren
            // klikkaukset (alla oleva raide p‰‰lle ja raiteiden poisto).
            doubleClicked = MouseDoubleClick()
            For x=0 To MAPSIZE-1
                For y=0 To MAPSIZE-1
                    If TileType(x,y) = TILE_TRACK And MouseOverTile(x,y) Then
                        If doubleClicked Then
                            // Jos tuplaklikattiin ja hiiri on juuri t‰m‰n laatan p‰‰ll‰,
                            // niin vaihdetaan p‰‰ll‰ ja alla olevat laatat kesken‰‰n.
                            // Tarkistetaan kuitenkin ett‰ paikalla on kaksi laattaa ylip‰‰ns‰.
                            If RAILS(x,y,RAIL_UNDER)<>TR_EMPTY Then
                                tmp = RAILS(x,y,RAIL_TOP)
                                RAILS(x,y,RAIL_TOP) = RAILS(x,y,RAIL_UNDER)
                                RAILS(x,y,RAIL_UNDER) = tmp
                            EndIf
                        ElseIf MouseUp(2) Then
                            // Hiiren kakkospainiketta (yleens‰ oikeata) painiketta painettiin.
                            // Poistetaan hiiren alla oleva tile.
                            DeleteTrack(x,y)
                        EndIf
                    EndIf
                    
                    // Piirret‰‰n palanen n‰ytˆlle
                    DrawTrack(x,y)
                Next y
            Next x
            
            // Nollataan junien liikkeen muuttujat (kts. kommentit niiden kohdalta).
            movement# = 0.0
            movedInTile# = 0.0
        Else
            ClsColor 0,0,0
            
            // Piirret‰‰n raiteet.
            For x=0 To MAPSIZE-1
                For y=0 To MAPSIZE-1
                    DrawTrack( x, y )
                Next y
            Next x
            
            // Junien siirt‰misen suuruuden m‰‰r‰‰v‰ muuttuja.
            movement# = speedFactor# * passedTime
            
            // Kuinka paljon ollaan liikutu yhden ruudun aikana.
            // Kun t‰t‰ muuttujaa verrataan TILESIZE-vakioon, saadaan
            // tieto, milloin kaikkien junien tulisi olla mennyt yhden
            // laatan verran eteenp‰in. T‰m‰ muuttuja pit‰‰ nollata
            // aina kun junat ovat kulkeneet yhden ruudun verran.
            movedInTile# = movedInTile# + movement#
            
            // Tarkistetaan, ollanako siirrytty yhden laatan verran.
            If movedInTile# >= TILESIZE Then
                movedInTile# = 0.0
                
                
                For tr.TRAINS = Each TRAINS
                    // Tarkistetaan tˆrm‰ykset loppupalaseen.
                    check = CheckFinishTile( tr\obj, tr\trainColor )
                    If check = False Then
                        // Oho, tˆrm‰ttiin, virheilmoitus ja takaisin muokkausmoodiin.
                        DrawOverlayInfo( "You failed!", "Game over" )
                        changeMode = True
                        ClearKeys()
                    ElseIf check = True Then
                        // Juna p‰‰si maaliin, poistetaan se pelist‰.
                        DeleteObject tr\obj
                        Delete tr
                    EndIf
                Next tr
                
                // Lis‰t‰‰n uusia junia liikenteeseen, jos niit‰ on olemassa.
                PlaceTrains()
            Else
                // Muulloin siirret‰‰n junia normaalisti.
                For tr.TRAINS = Each TRAINS
                    MoveObject tr\obj, movement#
                Next tr
            EndIf
        EndIf
        
        // Enter-n‰pp‰imell‰ laitetaan junat liikkeelle / poistetaan junat.
        If KeyHit( cbKeyReturn ) Or changeMode Then
            changeMode = False
            
            // Vaihdetaan muokkauksen salliminen.
            allowEditing = Not allowEditing
            
            If allowEditing Then
                // Jos muokkaus sallitaan, poistetaan olemassa olevat junat kokoelmasta.
                For tr.TRAINS = Each TRAINS
                    DeleteObject tr\obj
                    Delete tr
                Next tr
                
                // Laitetaan kartta alkukuoseihinsa.
                GameResetBlocks()
            Else
                // Muulloin asetetaan junat paikoilleen alkupisteisiins‰.
                PlaceTrains()
            EndIf
        EndIf
        
        // Piirret‰‰n objektit (junat) raiteiden j‰lkeen ja ennen kartan palasia.
        DrawGame
        
        // Piirret‰‰n kartan palaset.
        DrawBlocks()
        
        SetFont FONTS( FNT_DEFAULT )
        Color cbWhite
        Text BORDERSIZE, TILESIZE*MAPSIZE + BORDERSIZE*2, "Tile under mouse: " + TileType2( MouseX(), MouseY() )
        Text BORDERSIZE, TILESIZE*MAPSIZE + BORDERSIZE*2 + 20, "Track under mouse: " + TrackType2( MouseX(), MouseY() )
        
        // FPS-riippumaton liike
        passedTime = Timer() - oldTime
        oldTime = Timer()
        DrawScreen
    Until EscapeKey() Or KeyHit(cbKeyQ)
    
    // Poistetaan junat kummittelemasta
    For tr.TRAINS = Each TRAINS
        DeleteObject tr\obj
        Delete tr
    Next tr
    
    Return True
    
EndFunction

//================================================================================
// Raiteiden piirto karttaan.
//================================================================================
Function GameEditMap()
    // Tarkistetaan hiirell‰ piirto
    blockType = checkRailDraws()
    
    // Jos tapahtui muutos, niin poistetaan muokatun tilen toisarvoinen raide
    // ja asetetaan nykyinen raide toisarvoiseksi. Uusi raite ensiarvoiseksi.
    // MUTTA vain jos uusi block ei ole sama kuin jo nyt p‰‰ll‰ oleva.
    If blockType<>False Then
        If blockType <> RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) Then
            // Ei muuteta palasia, jos edellinen palanen on jo x-risteys ja uusi palanen olisi suora.
            If Not ( ( blockType = TR_VERTICAL Or blockType = TR_HORIZONTAL ) And RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = TR_XCROSS )
                // Tarkistetaan, tekeekˆ uusi raide vanhan kanssa x-risteyksen.
                If blockType = TR_VERTICAL And RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = TR_HORIZONTAL Then
                    RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = TR_XCROSS
                    RAILS( gEditedTileX, gEditedTileY, RAIL_UNDER ) = TR_XCROSS
                ElseIf blockType = TR_HORIZONTAL And RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = TR_VERTICAL Then
                    RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = TR_XCROSS
                    RAILS( gEditedTileX, gEditedTileY, RAIL_UNDER ) = TR_XCROSS
                ElseIf RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = TR_XCROSS Then
                    // Jos vanha raide on X-risteys ja uusi raide on mutka, poistetaan X-risteys ja j‰tet‰‰n vain mutka.
                    RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = blockType
                    RAILS( gEditedTileX, gEditedTileY, RAIL_UNDER ) = TR_EMPTY
                Else
                    // Muuten vain siirret‰‰n vanha pala alle ja laitetaan uusi palanen p‰‰lle.
                    RAILS( gEditedTileX, gEditedTileY, RAIL_UNDER ) = RAILS( gEditedTileX, gEditedTileY, RAIL_TOP )
                    RAILS( gEditedTileX, gEditedTileY, RAIL_TOP ) = blockType
                EndIf
            EndIf
        EndIf
    EndIf
EndFunction

//================================================================================
// Hieman monimutkainen funktio uuden raiteen selvitt‰miseksi. Uuden palasen
// koordinaatit tallennetaan muuttujiin gEditedTileX ja gEditTileY.
// Funktio tarvitsee avukseen useita globaaleia, koska se on v‰h‰n purkkainen.
// gCRD-alkuiset globaalit ovat funktion sis‰iseen k‰yttˆˆn tarkoitetut.
// Funktiota pit‰‰ kutsua joka loopin kierros.
// -> Funktio palauttaa uuden palasen vakion arvon.
//================================================================================
Global gCRDtileX, gCRDtileY, gCRDstartTileX, gCRDstartTileY
Global gCRDstartX, gCRDstartY, gCRDendX, gCRDendY
Global gEditedTileX, gEditedTileY

Function CheckRailDraws()
    
    gCRDtileX = (MouseX()-BORDERSIZE)/64
    gCRDtileY = (MouseY()-BORDERSIZE)/64
    
    gCRDtileX = Min(Max(gCRDtileX,0),MAPSIZE-1)
    gCRDtileY = Min(Max(gCRDtileY,0),MAPSIZE-1)
    
    If MouseDown(1)
        If gCRDstartTileX=-1 Or gCRDstartTileY=-1 Then gCRDstartTileX=gCRDtileX : gCRDstartTileY=gCRDtileY
        For x2=Max(Min(RoundDown(MouseX()/64)-1,10),0) To Max(Min(RoundDown(MouseX()/64)+1,10),0)
            For y2=Max(Min(RoundDown(MouseY()/64)-1,10),0) To Max(Min(RoundDown(MouseY()/64)+1,10),0)
                For i=0 To 1
                    If GLUEPOINTS(x2,y2,i,0) >= BORDERSIZE And GLUEPOINTS(x2,y2,i,1) >= BORDERSIZE Then
                        If Distance(MouseX(),MouseY(),GLUEPOINTS(x2,y2,i,0),GLUEPOINTS(x2,y2,i,1))<TILESIZE/4 Then 
                            If gCRDstartX=-1 Then
                                gCRDstartX=GLUEPOINTS(x2,y2,i,0)
                                gCRDstartY=GLUEPOINTS(x2,y2,i,1)
                            ElseIf gCRDendX=-1 Or gCRDendX=gCRDstartX
                                gCRDendX=GLUEPOINTS(x2,y2,i,0)
                                gCRDendY=GLUEPOINTS(x2,y2,i,1)
                            EndIf
                        EndIf
                    EndIf
                Next i
            Next y2
        Next x2
        
        If gCRDtileX<>gCRDstartTileX Or gCRDtileY<>gCRDstartTileY Then
            gCRDstartX=-1 : gCRDstartY=-1 : gCRDendX=-1 : gCRDendY=-1 : gCRDstartTileX=-1 : gCRDstartTileY=-1
        EndIf
        
        If gCRDstartX<>-1 And gCRDendX<>-1 Then
            'Color cbYellow
            'Line gCRDstartX,gCRDstartY,gCRDendX,gCRDendY
            angle = GetAngle( gCRDstartX, gCRDstartY, gCRDendX, gCRDendY )
            blockCheck = gCRDstartX - gCRDstartTileX*64 - BORDERSIZE
            If ( gCRDstartX <> gCRDendX ) Or ( gCRDstartY <> gCRDendY ) Then
                block = TR_EMPTY
                If gCRDstartX = gCRDendX Then
                    block = TR_VERTICAL
                ElseIf gCRDstartY = gCRDendY Then
                    block = TR_HORIZONTAL
                ElseIf angle=315 Then
                    If blockCheck=0 Then
                        block = TR_BOTTOMLEFT
                    Else
                        block = TR_TOPRIGHT
                    EndIf
                ElseIf angle=135 Then
                    If blockCheck=32 Then
                        block = TR_BOTTOMLEFT
                    Else
                        block = TR_TOPRIGHT
                    EndIf
                ElseIf angle=225 Then
                    If blockCheck=32 Then
                        block = TR_TOPLEFT
                    Else
                        block = TR_BOTTOMRIGHT
                    EndIf
                ElseIf angle=45 Then
                    If blockCheck=0 Then
                        block = TR_TOPLEFT
                    Else
                        block = TR_BOTTOMRIGHT
                    EndIf
                EndIf
            EndIf
        EndIf
        
    Else 
        gCRDstartX=-1 : gCRDstartY=-1 : gCRDendX=-1 : gCRDendY=-1 : gCRDstartTileX=-1 : gCRDstartTileY=-1
    EndIf
    
    If block<>TR_EMPTY Then
        gEditedTileX = gCRDtileX
        gEditedTileY = gCRDtileY
        Return block
    Else
        Return False
    EndIf
    
EndFunction 

//================================================================================
// Kartan alustus
//================================================================================
Function InitializeMap()
    // Tyhjennet‰‰n kaikki muistissa olevat palaset
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        If sb\img <> 0 Then DeleteImage sb\img
        Delete sb
    Next sb
    
    // Alustetaan kaikki etuk‰teen ladatut kuvat tyhjiksi.
    For x=0 To MAPSIZE-1
        For y=0 To MAPSIZE-1
            For i=0 To 9
                GAME_PRELOADEDSTARTS( x, y, i ) = 0
            Next i
        Next y
    Next x
    
    // Rakennetaan testikartta
    // GameAddBlock( _tileX, _tileY, _type, _colors$, _directions )
    GameAddBlock( 0, 0, TILE_START, "0 1 2 3 4 5", 2 )
    GameAddBlock( 6, 0, TILE_FINISH, "5 1 0 3 4 2", 8 )
EndFunction 

//================================================================================
// Raiteiden alustus
//================================================================================
Function InitializeTracks()
    // Asetetaan kaikki raiteet tyhjiksi.
    For x=0 To MAPSIZE-1
        For y=0 To MAPSIZE-1
            RAILS(x,y,RAIL_TOP) = TR_EMPTY
            RAILS(x,y,RAIL_UNDER) = TR_EMPTY
        Next y
    Next x
EndFunction

//================================================================================
// Lis‰‰ palasen pelimaailmaan.
//================================================================================
Function GameAddBlock( _tileX, _tileY, _type, _colors$, _directions )
    newSB.SPECIALBLOCKS = New( SPECIALBLOCKS )
    newSB\tileX = _tileX
    newSB\tileY = _tileY
    newSB\blockType = _type
    newSB\blockColors = _colors$
    newSB\gameColors = newSB\blockColors
    newSB\directions = _directions
    
    // Ladataan etuk‰teen kaikki tulevat kuvat t‰lle palaselle.
    If newSB\blockType = TILE_START Then 
        colors$ = "pois " + newSB\gameColors
        While CountWords( colors$ ) > 0
            colors$ = Trim( Right( colors$, Len( colors$ ) - Len( GetWord( colors$, 1 ) ) ) )
            
            If GAME_PRELOADEDSTARTS( newSB\tileX, newSB\tileY, Int( CountWords( colors$ ) ) ) = 0 Then
                GAME_PRELOADEDSTARTS( newSB\tileX, newSB\tileY, Int( CountWords( colors$ ) ) ) = AssembleBlock( newSB\blockType, colors$, newSB\directions, newSB\blockColors )
            EndIf
        Wend
        
        // Asetetaan ensimm‰inen kuva t‰lle palaselle
        newSB\img = GAME_PRELOADEDSTARTS( newSB\tileX, newSB\tileY, Int( CountWords( newSB\gameColors ) ) )
    EndIf
    
EndFunction

//================================================================================
// Resetoi kaikki pelimaailman palaset alkutilaansa.
//================================================================================
Function GameResetBlocks( )
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        If sb\blockType = TILE_START Then 
            sb\gameColors = sb\blockColors
            sb\img = GAME_PRELOADEDSTARTS( sb\tileX, sb\tileY, Int( CountWords( sb\gameColors ) ) )
            
        ElseIf sb\blockType = TILE_FINISH Then
            sb\gameColors = sb\blockColors
            sb\img = AssembleBlock( sb\blockType, sb\blockColors, sb\directions )
        EndIf
    Next sb
EndFunction

//================================================================================
// Junien asentaminen paikoilleen. Asettaa aina ensimm‰isen v‰rin kohdalle
// junan, ja poistaa sitten alkupalasen tiedoista kyseisen v‰rin. N‰in saadaan
// aikaiseksi se, ett‰ kun t‰t‰ funktiota kutsutaan aina kun junat ovat kulkeneet
// yhden tilen verran eteenp‰in, laitetaan uusi juna maailmaan.
//================================================================================
Function PlaceTrains()
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        If sb\blockType = TILE_START And CountWords( sb\gameColors ) > 0 Then
            // Asetetaan uusi juna samoihin koordinaatteihin kuin alkupalanen,
            // ja k‰‰nnet‰‰n se osoittamaan alkupalasen suuntaa.
            newTrain.TRAINS = New(TRAINS)
            
            // Uuden junan v‰ri on sama kuin palasen ensimm‰inen v‰ri
            newTrain\trainColor = Int( GetWord( sb\gameColors, 1 ) )
            
            // Poistetaan palasen tiedoista juuri lis‰tty v‰ri.
            sb\gameColors = Right( sb\gameColors, Len( sb\gameColors ) - Len( GetWord( sb\gameColors, 1 ) ) )
            sb\gameColors = Trim( sb\gameColors )
            
            // Asetetaan palaselle uusi kuva, koska sielt‰ on nyt poistunut yksi juna.
            sb\img = GAME_PRELOADEDSTARTS( sb\tileX, sb\tileY, Int( CountWords( sb\gameColors ) ) )
            
            // Luodaan uusi objekti maailmaan.
            newTrain\obj = CloneObject( TRAINOBJECTS( newTrain\trainColor ) )
            
            // Asetetaan se keskelle alkupalasta.
            xPos = sb\tileX * TILESIZE + BORDERSIZE + TILESIZE/2
            yPos = sb\tileY * TILESIZE + BORDERSIZE + TILESIZE/2
            ScreenPositionObject newTrain\obj, xPos, yPos
            
            // K‰‰nnet‰‰n juna alkupalasen m‰‰r‰‰m‰‰n suuntaan.
            If sb\directions = 1 Then
                // Ylˆs
                RotateObject newTrain\obj, 90
            ElseIf sb\directions = 2 Then
                // Oikealle
                RotateObject newTrain\obj, 0
            ElseIf sb\directions = 4 Then
                // Alas
                RotateObject newTrain\obj, 270
            ElseIf sb\directions = 8 Then
                // Vasemmalle
                RotateObject newTrain\obj, 180
            Else
                // Palasen suunta ei ollut yksiselitteinen. Poistetaan
                // juna maailmasta.
                DeleteObject newTrain\obj
                Delete newTrain
            EndIf
        EndIf
    Next sb
EndFunction 

//================================================================================
// Tarkistaa, tuliko oikeanv‰rinen juna perille loppupalaseen, ja jos tuli, niin
// v‰hennet‰‰n loppupalasesta kyseinen v‰ri pois. Funktiolle annettavat 
// koordinaatit ovat ruutukoordinaatteja. Funktion eri palautusarvot ovat:
//    1: juna p‰‰si maaliin onnistuneesti
//    0: juna tˆrm‰si (v‰‰r‰n v‰rinen tai maali oli jo t‰ynn‰)
//   -1: juna ei ollut maalin p‰‰ll‰
//================================================================================
Function CheckFinishTile( _trainObj, _trainColor )
    x = ObjectSX( _trainObj )
    y = ObjectSY( _trainObj )
    
    tileX = Min( Max( ( x - BORDERSIZE ) / TILESIZE, 0 ), MAPSIZE-1 )
    tileY = Min( Max( ( y - BORDERSIZE ) / TILESIZE, 0 ), MAPSIZE-1 )
    
    position = -1
    
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        If sb\tileX = tileX And sb\tileY = tileY And sb\blockType = TILE_FINISH Then
            // Ollaan loppupalasen p‰‰ll‰. Tarkistetaan v‰rit.
            For i=1 To CountWords( sb\gameColors )
                position = position + Len( GetWord( sb\gameColors, i ) ) + 1
                If _trainColor = GetWord( sb\gameColors, i ) Then
                    // Maalissa oli oikean v‰rinen palanen. Poistetaan se palasesta.
                    colorsBefore$ = Trim( Left( sb\gameColors, position - Len( GetWord( sb\gameColors, 1 ) ) ) )
                    colorsAfter$ = Trim( Mid( sb\gameColors, position + Len( GetWord( sb\gameColors, 1 ) ) ) )
                    
                    sb\gameColors = colorsBefore$ + " " + colorsAfter$
                    
                    // Asetetaan loppupalaselle uusi kuva.
                    If sb\img <> 0 Then DeleteImage sb\img
                    sb\img = AssembleBlock( TILE_FINISH, sb\gameColors, sb\directions, sb\blockColors )
                    
                    // Palautetaan onnistunut maaliin saapuminen.
                    Return 1
                EndIf
            Next i
            
            // Kaikki v‰rit k‰ytiin l‰pi, mutta oikeaa ei lˆytynyt. Tˆrm‰t‰‰n.
            Return 0
        EndIf
    Next sb
    
    // K‰ytiin koko kokoelma l‰pi, eik‰ palasta lˆytynyt objektin koordinaateista.
    Return -1
EndFunction 
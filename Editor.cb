//********************************************************************************
// Editor.cb
//
// Karttaeditorin toteutus
//********************************************************************************

//================================================================================
// Editorin p‰‰silmukka
//================================================================================
Function Editor()
    currentMap$ = getTmpFilePath() // Random-karttapolku
    blockIsValid = False // Onko palanen oikeanlainen
    
    startY = TILESIZE*MAPSIZE + BORDERSIZE*2
    
    blockType = -1
    blockColor$ = TR_GENERAL
    
    blockImg = MakeImage( TILESIZE, TILESIZE ) // Aluksi tyhj‰ kuva, ettei kaadu drawimageen.
    
    Repeat
        ClsColor cbBlack
        DrawImage GUIIMAGES( GUI_GAMEAREA ), BORDERSIZE, BORDERSIZE
        
        Color cbWhite
        For x=0 To MAPSIZE-1
            For y=0 To MAPSIZE-1
                If MouseOverTile(x,y) Then
                    If MouseHit(1) And blockIsValid Then
                        If TileType(x,y) = TILE_EMPTY Then
                            // Lis‰t‰‰n uusi palanen, jos paikalla ei ole viel‰ mit‰‰n.
                            newSB.SPECIALBLOCKS = New(SPECIALBLOCKS)
                            AddBlock( x, y, ConvertToInteger(newSB), blockType, blockColor, blockDirections, blockImg )
                        EndIf
                    ElseIf MouseHit(2) Then
                        // Hiiren kakkospainike kumittaa.
                        DeleteBlock(x,y) 'Map.cb
                    EndIf
                EndIf
            Next y
        Next x
        
        // Piirr‰ kartta
        DrawBlocks() 'Map.cb
        
        oldType=blockType : oldColor$=blockColor : oldDirections=blockDirections
        
        blockType = DrawSelectType( blockType, startY )
        
        // Jos vaihdetaan loppupalasta alkupalaseen, nollataan suunnat, ettei alusta
        // voida l‰hte‰ useaan suuntaan.
        If oldType=TILE_FINISH And blockType=TILE_START Then blockDirections=0
        
        If blockType<>-1 Then
            If blockType <> TILE_ROADBLOCK Then
                blockDirections = DrawSelectDirections( blockDirections, blockType, startY+80 )
                blockColor = DrawSelectColor( blockColor, blockType, startY+160 )
            EndIf
        EndIf
        
        // Nappuloiden piirto ja napautuksien tarkistus
        newClicked  = DrawEditorButton( EDI_NEW_UNSEL,  BORDERSIZE, startY+250 )
        loadClicked = DrawEditorButton( EDI_LOAD_UNSEL, BORDERSIZE+100, startY+250 )
        saveClicked = DrawEditorButton( EDI_SAVE_UNSEL, BORDERSIZE+200, startY+250 )
        testClicked = DrawEditorButton( EDI_TEST_UNSEL, BORDERSIZE+300, startY+250 )
        
        If blockType<>-1 Then
            // Jos ollaan kasattu edes jonkinmoista laattaa, niin piirret‰‰n Clear-nappula,
            // joka tyhjent‰‰ valitun tilen. Piirret‰‰n laatan taustalle myˆs tummanpunainen
            // laatikko.
            If MouseOver( ScreenWidth()-BORDERSIZE-25, startY+80, 25, TILESIZE ) Then
                DrawImage EDITORIMAGES( EDI_CLEARASSEMB_SEL ), ScreenWidth()-BORDERSIZE-25, startY+80
                
                Color 64,0,0
                Box ScreenWidth()-BORDERSIZE-TILESIZE-30, startY+78, TILESIZE+4, TILESIZE+4
                
                If MouseHit(1) Then
                    blockType=-1
                    blockColor=TR_GENERAL
                    blockDirections=0
                EndIf
            Else
                DrawImage EDITORIMAGES( EDI_CLEARASSEMB_UNSEL ), ScreenWidth()-BORDERSIZE-25, startY+80
            EndIf
        EndIf
        
        // Tehd‰‰n uuden laatan kuva, jos jotain osaa on vaihdettu.
        If oldType<>blockType Or oldColor<>blockColor Or oldDirections<>blockDirections Then
            blockImg = AssembleBlock( blockType, blockColor, blockDirections )
        EndIf
        
        // Piirret‰‰n kasattu laatta
        DrawImage blockImg, ScreenWidth()-BORDERSIZE-TILESIZE-28, startY+80
        
        // Tarkistetaan, onko laatta sopiva laitettavaksi.
        blockIsValid = CheckBlockValidity( blockType, blockColor, blockDirections )
        SetWindow "Valid: " + blockIsValid
        
        If saveClicked Then EditorSaveMenu(currentMap$, startY+240, 180 ) 
        If loadClicked Then EditorLoadMenu( startY+240, 400 )
        
        DrawScreen
    Until EscapeKey() Or KeyHit(cbKeyQ)
EndFunction 

//================================================================================
// Funktio eri laattatyyppien piirt‰miseen. Palauttaa valitun laatan.
//================================================================================
Function DrawSelectType( _current, _yPos )
    DrawImage ENDIMAGES( TR_GENERAL, EI_SIZE_1x1, EI_STARTIMG ), BORDERSIZE+6, _yPos+6
    DrawImage ENDIMAGES( TR_GENERAL, EI_SIZE_1x1, EI_ENDIMG ), BORDERSIZE+TILESIZE+6, _yPos+6
    DrawImage BLOCKIMAGES( BLI_ROADBLOCK ), BORDERSIZE+TILESIZE*2, _yPos
    'DrawImage BLOCKIMAGES( BLI_PAINTER ), BORDERSIZE+TILESIZE*3, _yPos
    'DrawImage BLOCKIMAGES( BLI_DIVIDER ), BORDERSIZE+TILESIZE*4, _yPos
    
    Color cbGreen
    If _current = TILE_START
        Box BORDERSIZE, _yPos, TILESIZE, TILESIZE, OFF
    ElseIf _current = TILE_FINISH
        Box BORDERSIZE+TILESIZE, _yPos, TILESIZE, TILESIZE, OFF
    ElseIf _current = TILE_ROADBLOCK
        Box BORDERSIZE+TILESIZE*2, _yPos, TILESIZE, TILESIZE, OFF
    'ElseIf _current = TILE_PAINTER
    '    Box BORDERSIZE+TILESIZE*3, _yPos, TILESIZE, TILESIZE, OFF
    'ElseIf _current = TILE_DIVIDER
    '    Box BORDERSIZE+TILESIZE*4, _yPos, TILESIZE, TILESIZE, OFF
    EndIf
        
    Color cbWhite
    
    For i=0 To 2 '4
        If MouseOver( BORDERSIZE+TILESIZE*i, _yPos, TILESIZE, TILESIZE ) Then
            Box BORDERSIZE+TILESIZE*i, _yPos, TILESIZE, TILESIZE, OFF
            If MouseHit(1) Then
                Select i
                    Case 0: Return TILE_START
                    Case 1: Return TILE_FINISH
                    Case 2: Return TILE_ROADBLOCK
                    'Case 3: Return TILE_PAINTER
                    'Case 4: Return TILE_DIVIDER
                EndSelect
            EndIf
        EndIf
    Next i
    
    Return _current
EndFunction

//================================================================================
// Funktio eriv‰risten laattojen piirt‰miseen. Palauttaa valitun v‰rin.
//================================================================================
Function DrawSelectColor( _current$, _type, _yPos )
    ret$ = _current
    
    For i=0 To 6
        xPos = BORDERSIZE+TILESIZE*i
        If _type = TILE_START Or _type = TILE_FINISH Then
            DrawImage ENDIMAGES( i, EI_SIZE_1x1, (_type=TILE_FINISH) ), xPos+6, _yPos+6
            If MouseOver( xPos, _yPos, TILESIZE, TILESIZE ) Then
                Box xPos, _yPos, TILESIZE, TILESIZE, OFF
                If MouseHit(1) Then 
                    If CountWords( ret ) < 9 Then 
                        If ret = TR_GENERAL Then
                            ret = i
                        Else
                            ret = ret + " " + i
                        EndIf
                    EndIf
                ElseIf MouseHit(2) Then
                    If CountWords( ret ) >= 2 Then
                        ret = Left( ret, Len(ret)-2 )
                    Else
                        ret = TR_GENERAL
                    EndIf
                EndIf
            EndIf
        EndIf
    Next i
    
    Return ret
EndFunction

//================================================================================
// Funktio eri sis‰‰n/ulos-suuntien valitsemiseen ja piirt‰miseen.
//================================================================================
Function DrawSelectDirections( _current, _type, _yPos )
    
    DrawImage EDITORIMAGES( EDI_UPARROW ), BORDERSIZE, _yPos
    DrawImage EDITORIMAGES( EDI_RIGHTARROW ), BORDERSIZE+TILESIZE+1, _yPos
    DrawImage EDITORIMAGES( EDI_BOTTOMARROW ), BORDERSIZE+TILESIZE*2+2, _yPos
    DrawImage EDITORIMAGES( EDI_LEFTARROW ), BORDERSIZE+TILESIZE*3+3, _yPos
    
    bitmask = _current
    
    For i=0 To 3
    
        Color cbGreen
        Select i
            Case 0
                If BinAnd( bitmask, 1 ) Then Box BORDERSIZE, _yPos, TILESIZE, TILESIZE, OFF
            Case 1
                If BinAnd( bitmask, 2 ) Then Box BORDERSIZE+TILESIZE+1, _yPos, TILESIZE, TILESIZE, OFF
            Case 2
                If BinAnd( bitmask, 4 ) Then Box BORDERSIZE+TILESIZE*2+2, _yPos, TILESIZE, TILESIZE, OFF
            Case 3
                If BinAnd( bitmask, 8 ) Then Box BORDERSIZE+TILESIZE*3+3, _yPos, TILESIZE, TILESIZE, OFF
        EndSelect
        
        Color cbWhite
        If MouseOver( BORDERSIZE+TILESIZE*i+i, _yPos, TILESIZE, TILESIZE ) Then
            Box BORDERSIZE+TILESIZE*i+i, _yPos, TILESIZE, TILESIZE, OFF
            If MouseHit(1) Then
                If _type = TILE_FINISH Then
                    Select i
                        Case 0: bitmask = BinXor( bitmask, 1 )
                        Case 1: bitmask = BinXor( bitmask, 2 )
                        Case 2: bitmask = BinXor( bitmask, 4 )
                        Case 3: bitmask = BinXor( bitmask, 8 )
                    EndSelect
                ElseIf _type = TILE_START Then
                    Select i
                        Case 0: bitmask = 1
                        Case 1: bitmask = 2
                        Case 2: bitmask = 4
                        Case 3: bitmask = 8
                    EndSelect
                EndIf
            EndIf
        EndIf

    Next i
    
    Return bitmask
    
EndFunction

//===============================================================================
// Funktio, joka kokoaa laatan ja palauttaa luodun kuvan.
// Toisena parametrina (_colors$) annetaan laatan osien v‰rit v‰lilyonnein
// eroteltuna merkkijonona.
//===============================================================================
Function AssembleBlock( _type, _colors$, _directions )
    img = MakeImage( TILESIZE, TILESIZE )
    
    // Lasketaan valmiiksi koordinaatit ulos- ja sis‰‰nnuolille
    centerX = (ImageWidth(BLOCKIMAGES( BLI_BORDERS ))-ImageWidth(BLOCKIMAGES( BLI_EXIT_UP )))/2
    centerY = (ImageHeight(BLOCKIMAGES( BLI_BORDERS ))-ImageHeight(BLOCKIMAGES( BLI_EXIT_LEFT )))/2
    rightX = ImageWidth(BLOCKIMAGES( BLI_BORDERS ))-ImageWidth(BLOCKIMAGES( BLI_EXIT_LEFT ))
    bottomY = ImageHeight(BLOCKIMAGES( BLI_BORDERS ))-ImageHeight(BLOCKIMAGES( BLI_EXIT_UP ))
    
    // Piirret‰‰n este.
    If _type = TILE_ROADBLOCK Then
        srcImg = BLOCKIMAGES( BLI_ROADBLOCK )
        CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), 0, 0, Image(srcImg), Image(img)
    EndIf

    // Palasten m‰‰r‰ saadaan selville _extra-parametrin v‰lilyˆntien m‰‰r‰st‰.
    // _extra-parametri sis‰lt‰‰ palasten v‰rit v‰lilyˆnnein eroteltuna, alkaen
    // vasemman yl‰nurkan v‰rist‰.
    _colors$ = Trim( _colors$ )
    amount = CountWords( _colors$ )
    
    // Jos m‰‰r‰ > 9, on palasia liikaa eik‰ kuvaa voida piirt‰‰.
    // Jos m‰‰r‰ on puolestaan 0, ei palasia ole.
    // Asetetaan parametri _type osoittaman olemattomaan palikkaan.
    // N‰in ei piirret‰ mit‰‰n kuvaa ja palautetaan tyhj‰ kuva.
    // N‰in peli ei kaadu DrawImage failed -ilmoitukseen. :)
    If amount > 9 Or amount <= 0 Then
        _type = -1
    Else
        // Tarkistetaan, ett‰ _extra-parametrissa ei ole v‰‰ri‰ arvoja.
        For i=0 To amount
            If Int( GetWord( _colors$, i ) ) < 0 Or Int( GetWord( _colors$, i ) ) > TR_GENERAL Then
                _type = -1
                Exit
            EndIf
        Next i
    EndIf

    If _type = TILE_START Then
        
        // Lis‰t‰‰n kuvaan aluksi reunukset
        srcImg = BLOCKIMAGES( BLI_BORDERS )
        CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), 0, 0, Image(srcImg), Image(img)
        
        // Lis‰t‰‰n oikeanv‰riset symbolit kuvaan
        If amount = 1 Then
            srcImg = ENDIMAGES( Int( _colors$ ), EI_SIZE_1x1, EI_STARTIMG )
            CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), 6, 6, Image(srcImg), Image(img)
        EndIf
        If amount > 1 And amount <= 4 Then
            For i=0 To amount-1
                srcImg = ENDIMAGES( Int( GetWord( _colors$, i+1 ) ), EI_SIZE_2x2, EI_STARTIMG )
                xPos = 6+(i Mod 2)*28
                yPos = 6+( i>=2 )*28
                CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), xPos, yPos, Image(srcImg), Image(img)
            Next i
        EndIf
        If amount > 4 And amount <= 9 Then
            For i=0 To amount-1
                srcImg = ENDIMAGES( Int( GetWord( _colors$, i+1 ) ), EI_SIZE_3x3, EI_STARTIMG )
                xPos = 6+(i Mod 3)*18
                yPos = 6+( (i>=3)+(i>=6) )*18
                CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), xPos, yPos, Image(srcImg), Image(img)
            Next i
        EndIf
        
        // Piirret‰‰n lopuksi ulosk‰ynnit bitmaskin m‰‰r‰‰miin paikkoihin.
        DrawToImage img
            If BinAnd(_directions,1)=1 Then DrawImage BLOCKIMAGES( BLI_EXIT_UP ), centerX, 0
            If BinAnd(_directions,2)=2 Then DrawImage BLOCKIMAGES( BLI_EXIT_RIGHT ), rightX, centerY
            If BinAnd(_directions,4)=4 Then DrawImage BLOCKIMAGES( BLI_EXIT_BOTTOM ), centerX, bottomY
            If BinAnd(_directions,8)=8 Then DrawImage BLOCKIMAGES( BLI_EXIT_LEFT ), 0, centerY
        DrawToScreen
    ElseIf _type = TILE_FINISH
        
        // Lis‰t‰‰n kuvaan aluksi reunukset
        srcImg = BLOCKIMAGES( BLI_BORDERS )
        CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), 0, 0, Image(srcImg), Image(img)
        
        // Lis‰t‰‰n oikeanv‰riset symbolit kuvaan
        If amount = 1 Then
            srcImg = ENDIMAGES( Int( _colors$ ), EI_SIZE_1x1, EI_ENDIMG )
            CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), 6, 6, Image(srcImg), Image(img)
        ElseIf amount <= 4 Then
            For i=0 To amount-1
                srcImg = ENDIMAGES( Int( GetWord( _colors$, i+1 ) ), EI_SIZE_2x2, EI_ENDIMG )
                xPos = 6+(i Mod 2)*28
                yPos = 6+( i>=2 )*28
                CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), xPos, yPos, Image(srcImg), Image(img)
            Next i
        EndIf
        If amount>4 And amount <= 9 Then
            For i=0 To amount-1
                srcImg = ENDIMAGES( Int( GetWord( _colors$, i+1 ) ), EI_SIZE_3x3, EI_ENDIMG )
                xPos = 6+(i Mod 3)*18
                yPos = 6+( (i>=3)+(i>=6) )*18
                CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), xPos, yPos, Image(srcImg), Image(img)
            Next i
        EndIf
        
        // Piirret‰‰n lopuksi sis‰‰nk‰ynnit bitmaskin m‰‰r‰‰miin paikkoihin.
        DrawToImage img
            If BinAnd(_directions,1)=1 Then DrawImage BLOCKIMAGES( BLI_ENTRANCE_UP ), centerX, 0
            If BinAnd(_directions,2)=2 Then DrawImage BLOCKIMAGES( BLI_ENTRANCE_RIGHT ), rightX, centerY
            If BinAnd(_directions,4)=4 Then DrawImage BLOCKIMAGES( BLI_ENTRANCE_BOTTOM ), centerX, bottomY
            If BinAnd(_directions,8)=8 Then DrawImage BLOCKIMAGES( BLI_ENTRANCE_LEFT ), 0, centerY
        DrawToScreen
    EndIf
    
    Return img
EndFunction 

//================================================================================
// Lis‰‰ palanen kokoelmaan.
//================================================================================
Function AddBlock( _tileX, _tileY, _ptr, _type, _color$, _directions, _img=0 )
    newSB.SPECIALBLOCKS = ConvertToType(_ptr)
    
    newSB\tileX = _tileX
    newSB\tileY = _tileY
    newSB\blockType = _type

    // Tarkistetaan, ettei lis‰t‰ turhia tietoja palasille, jotka eiv‰t
    // sit‰ tietoa tarvitse.
    If _type = TILE_ROADBLOCK Then
        _color = TR_GENERAL
        _directions = 0
    ElseIf _type = TILE_DIVIDER Then
        _color = TR_GENERAL
    EndIf
    
    newSB\blockColors = _color$
    newSB\directions = _directions
    
    If _img<>0 Then 
        newSB\img = CloneImage( _img )
    Else
        newSB\img = AssembleBlock( _type, _color$, _directions )
    EndIf
    
EndFunction

//================================================================================
// Muuta olemassaolevaa palasta. Jos palasta ei ole olemassa, palauttaa False.
//================================================================================
Function ChangeBlock( _tileX, _tileY, _type, _color$, _directions )
    // Tarkistetaan, ettei lis‰t‰ turhia tietoja palasille, jotka eiv‰t
    // sit‰ tietoa tarvitse.
    If _type = TYPE_ROADBLOCK Then
        _color = TR_GENERAL
        _directions = 0
    ElseIf _type = TYPE_DIVIDER Then
        _color = TR_GENERAL
        _amount = 0
    EndIf
    
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        If sb\tileX = _tileX And sb\tileY = _tileY Then
            sb\blockType = _type
            sb\blockColors = _color$
            sb\directions = _directions
            Return True
        EndIf
    Next sb
    
    Return False
EndFunction

//================================================================================
// Piirt‰‰ nappulan, hoitaa hiiri-p‰‰ll‰ -animaation ja palauttaa, klikattiinko.
//================================================================================
Function DrawEditorButton( _type, _x, _y )
    imgWidth = ImageWidth( EDITORIMAGES( _type ) )
    imgHeight = ImageHeight( EDITORIMAGES( _type ) )

    If MouseOver( _x, _y, imgWidth, imgHeight ) Then
        DrawImage EDITORIMAGES( _type+4 ), _x, _y
        If MouseUp(1) Then Return True
    Else
        DrawImage EDITORIMAGES( _type ), _x, _y
    EndIf
    
    Return False
EndFunction

//================================================================================
// Funktio palauttaa randomilla tehdyn tiedostopolun tmp-tiedostoa varten.
//================================================================================
Function getTmpFilePath()
    folder$ = "saves/tmp/"
    If Not IsDirectory("saves") Then MakeDir "saves"
    If Not IsDirectory("saves/tmp") Then MakeDir "saves/tmp"
    If IsDirectory("saves")=0 Or IsDirectory("saves/tmp")=0 Then
        MakeError "Problem creating temporary directory!"
    EndIf
    
    randSeed$ = "abcdefghijklmnopqrstuvwxyz1234567890"
    
    loops = 0
    Repeat
        randend$ = ""
        For i=0 To 12
            randend$ = randend$ + Mid( randSeed$, Rand( 1, Len(randSeed$) ), 1 )
        Next i
        loops = loops + 1
        If loops > 1000 Then MakeError "Program crashed! Please report this bug and give this code: error61"
    Until Not FileExists( folder$ + randend$ + "-tmp.coh" )
    
    Return folder$ + randend$ + "-tmp.coh"
EndFunction 

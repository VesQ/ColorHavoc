//********************************************************************************
// SaveLoad.cb
//
// Karttojen ja ratkaisujen tallentaminen.
//********************************************************************************

//================================================================================
// Tallennusmenun piirtäminen editoriin.
//================================================================================
Function EditorSaveMenu( savePath$ = "", _y=-1, _height=-1 )
    If savePath$ = "" Then 
        savePath$ = getTmpFilePath() 'Editor.cb
    EndIf
    
    // Otetaan piirretty tausta talteen
    bgImg = DrawOverlayMenu( "Save map", _y, _height )
    
    // Syötteen maksimipituus, 32 merkkiä.
    SetFont FONTS( FNT_DEFAULT )
    inputWidth = TextWidth("################################" + "#_")
    
    // Luodaan söytteet tekijää ja kartan nimeä varten.
    authorInput = NewInput()
    nameInput = NewInput()
    
    // Asetetaan syötteet epäaktiivisiksi.
    ActiveInput( -1 )
    
    // Asetetaan syötteidein kursorit merkkijonojen loppuun.
    SetInput2Position( authorInput, Len(gMapAuthor) )
    SetInput2Position( nameInput, Len(gMapName) )
    
    // Tyhjennetään hiiripuskuri, ettei valikko vain välähdä ruudulla.
    ClearMouse()
    Repeat
        DrawImage bgImg, 0, 0
        
        // Syötteiden selitykset
        SetFont FONTS( FNT_OVERLAYMENU )
        Color cbWhite
        Text gOverlayX+30, gOverlayY+60, "Author: "
        Text gOverlayX+30, gOverlayY+95, "Map name: "
        
        // Piirretään tekijän nimen syöte ja ympärillä oleva laatikko
        If ActiveInput()=authorInput Then
            Color cbWhite
        ElseIf MouseOver( gOverlayX+120, gOverlayY+55, inputWidth, 30 ) Then
            Color cbGreen
            If MouseUp(1) Then ActiveInput( authorInput )
        Else
            Color 64, 64, 64
        EndIf
        Box gOverlayX+120, gOverlayY+55, inputWidth, 30, OFF
        
        // Piirretään kartan nimen syöte ja ympärillä oleva laatikko
        If ActiveInput()=nameInput Then
            Color cbWhite
        ElseIf MouseOver( gOverlayX+120, gOverlayY+90, inputWidth, 30 ) Then
            Color cbGreen
            If MouseUp(1) Then ActiveInput( nameInput )
        Else
            Color 64, 64, 64
        EndIf
        Box gOverlayX+120, gOverlayY+90, inputWidth, 30, OFF
        
        // "Save the map!" tekstin laatikon piirto
        If MouseOver( gOverlayX+80, gOverlayY+135, gOverlayWidth-160, 30 ) Then
            Color cbWhite
        Else
            Color 0, 0, 192
        EndIf
        // Paksummat reunat.
        Box gOverlayX+80, gOverlayY+135, gOverlayWidth-160, 30, OFF
        Box gOverlayX+81, gOverlayY+136, gOverlayWidth-162, 28, OFF
        
        // Piirretään teksti keskitetysti ruudulle, laatikon sisään
        Color cbWhite
        txt$ = "Save the map!"
        Text (ScreenWidth()-TextWidth(txt))/2, gOverlayY+139, txt
        
        // Hiiren klikkauksen eri toiminnot
        If MouseUp(1) Then
            If MouseOver( gOverlayX, gOverlayY, gOverlayWidth, gOverlayHeight ) Then
                // Hiiren klikkaus tapahtui overlayn sisällä.
                If MouseOver( gOverlayX+120, gOverlayY+55, inputWidth, 30 ) Then
                    // Klikattiin authorInputin päältä, joten aktivoidaan se.
                    // Tyhjennetään kuitenkin sitä ennen näppäimistöpuskuri, ettei
                    // syötteeseen ilmesty haamukirjaimia.
                    ClearKeys()
                    ActiveInput( authorInput )
                ElseIf MouseOver( gOverlayX+120, gOverlayY+90, inputWidth, 30 ) Then
                    // Klikattiin nameInputin päältä, joten aktivoidaan se.
                    ClearKeys()
                    ActiveInput( nameInput )
                ElseIf MouseOver( gOverlayX+80, gOverlayY+135, gOverlayWidth-160, 30 )
                    // Klikattiin "Save the map!" napista.
                    
                    // Suljetaan syötteet.
                    ActiveInput( -1 )
                    
                    // Tallennetaan tiedosto.
                    saved = SaveMapFile( savePath$ )
                    
                    If saved Then
                        DrawOverlayInfo( "The map was saved successfully", "Info", gOverlayY+135 )
                        // Arvotaan uusi uniikki tiedostonimi. Tämä tietysti pois valmiissa pelissä.
                        savePath$ = getTmpFilePath()
                    Else
                        DrawOverlayInfo( "There was a problem with map saving!|Please, try again.", "Error", gOverlayY+135 )
                    EndIf
                Else
                    // Jos ei oltu syötteiden päällä, niin suljetaan syötteet.
                    ActiveInput( -1 )
                EndIf
            Else
                // Jos  hiirellä klikattiin overlayn ulkopuolelta, niin poistutaan.
                Exit
            EndIf
        EndIf
        
        // Hoidetaan syötteiden piirto.
        SetFont FONTS( FNT_DEFAULT )
        gMapAuthor = Input2( authorInput, gMapAuthor, gOverlayX+120, gOverlayY+60, 32 )
        gMapName = Input2( nameInput, gMapName, gOverlayX+120, gOverlayY+95, 32 )
        
        // Täytyy ennen DrawScreeniä tarkistaa, halutaanko poistua silmukasta.
        // Muuten ruutu välähtää.
        If EscapeKey() Or ( ActiveInput()=-1 And KeyHit(cbKeyQ) ) Then Exit
        
        DrawScreen
    Forever
EndFunction 

//================================================================================
// Kartan varsinainen tallennus. Huomaa "saves" kansiossa oleva tiedosto, joka
// kertoo karttaformaatin muodon.
//================================================================================
Function SaveMapFile( _path$ )
    If FileExists( _path$ ) Then Return False
    
    If Right(_path$,4) <> ".coh" Then _path$ = _path$ + ".coh"
    
    If Len(gMapAuthor) > 32 Then gMapAuthor = Left( gMapAuthor, 32 )
    If Len(gMapName) > 32 Then gMapName = Left( gMapName, 32 )
    
    // Generoidaan MD5-hash kartan nimestä, tekijästä ja kartan datasta.
    md5source$ = gMapName + gMapAuthor
    For bl.SPECIALBLOCKS = Each SPECIALBLOCKS
        md5source$ = md5source$ + bl\tileX
        md5source$ = md5source$ + bl\tileY
        md5source$ = md5source$ + bl\blockType
        md5source$ = md5source$ + bl\directions
        md5source$ = md5source$ + bl\blockColors
    Next bl
    md5hash$ = MD5( md5source$ )
    
    f = OpenToWrite( _path$ )
        // Headerin kirjoittaminen.
        WriteString2( f, "CoH" )
        WriteString2( f, LSet( COH_VERSION, 13 ) )
        WriteString2( f, LSet( "", 16 ) )
        WriteString2( f, LSet( gMapName, 32 ) )
        WriteString2( f, LSet( gMapAuthor, 32 ) )
        WriteString2( f, md5hash$ )
        
        // Kartan data, 16-tavun kokoisissa paloissa.
        For bl.SPECIALBLOCKS = Each SPECIALBLOCKS
            WriteByte f, bl\tileX
            WriteByte f, bl\tileY
            WriteByte f, bl\blockType
            WriteByte f, bl\directions
            For i=1 To 9
                If i <= CountWords( bl\blockColors ) Then
                    WriteByte f, Int( GetWord( bl\blockColors, i ) )
                Else
                    WriteByte f, Asc(" ")
                EndIf
            Next i
            WriteString2( f, LSet( "", 3 ) ) // Varattu myöhemmälle käytölle.
        Next bl
    CloseFile f
    
    Return True
EndFunction 


//================================================================================
// Latausmenun piirtäminen editoriin.
//================================================================================
Function EditorLoadMenu( _y=-1, _height=-1 )
    // Otetaan piirretty tausta talteen
    bgImg = DrawOverlayMenu( "Load map", _y, _height )
    
    // Ladataan karttalista muistiin.
    LoadMapList()
    
    Repeat
        // Lataustekstin laatikon piirto
        If MouseOver( gOverlayX+80, gOverlayY+135, gOverlayWidth-160, 30 ) Then
            Color cbWhite
        Else
            Color 0, 0, 192
        EndIf
        // Paksummat reunat.
        Box gOverlayX+80, gOverlayY+135, gOverlayWidth-160, 30, OFF
        Box gOverlayX+81, gOverlayY+136, gOverlayWidth-162, 28, OFF
        
        // Piirretään teksti keskitetysti ruudulle, laatikon sisään
        Color cbWhite
        txt$ = "Fire up an""d load the map!"
        Text (ScreenWidth()-TextWidth(txt))/2, gOverlayY+139, txt
        
        // Hiiren klikkauksen eri toiminnot
        If MouseUp(1) Then
            If MouseOver( gOverlayX, gOverlayY, gOverlayWidth, gOverlayHeight ) Then
                // Hiiren klikkaus tapahtui overlayn sisällä.
                If MouseOver( gOverlayX+80, gOverlayY+135, gOverlayWidth-160, 30 )
                    // Klikattiin kartan latausnapista.
                    
                    // Ladataan tiedosto.
                    loaded = LoadMapFile( chosenFile$ )
                    
                    If loaded Then
                        DrawOverlayInfo( "The map was loaded successfully", "Info", gOverlayY+135 )
                    Else
                        DrawOverlayInfo( "There was a problem with loading the map!|Are you sure that there are any maps at all?", "Error", gOverlayY+135 )
                    EndIf
                Else
                    // Jos ei oltu syötteiden päällä, niin suljetaan syötteet.
                    ActiveInput( -1 )
                EndIf
            Else
                // Jos  hiirellä klikattiin overlayn ulkopuolelta, niin poistutaan.
                Exit
            EndIf
        EndIf
        
        // Täytyy ennen DrawScreeniä tarkistaa, halutaanko poistua silmukasta.
        // Muuten ruutu välähtää.
        If EscapeKey() Or ( ActiveInput()=-1 And KeyHit(cbKeyQ) ) Then Exit
        
        DrawScreen
    Forever
EndFunction

//================================================================================
// Funktio lataa kaikkien karttojen tiedot muistiin. Tietoihin kuuluu siis
// tiedostopolun lisäksi kartan tekijä, nimi ja md5-hash. Tiedot tallennetaan 
// MAPS-kokoelmaan. Funktio palauttaa totuusarvon, onnistuttiinko löytämään edes 
// yksi kartta.
//================================================================================
Function LoadMapList()

    For map.MAPS = Each MAPS
        // Tyhjennetään eka koko karttalista
        Delete map
    Next map
    
    If Not IsDirectory("saves") Then Return False
    
    didWeFindAMap = False
    
    ChDir "saves"
    
    StartSearch
        // Etsitään kaikki .coh-päätteiset tiedostot ja ladataan niiden tiedot muistiin.
        Repeat
            file$ = FindFile()
            
            If file$ = "" Then Exit // Kaikki käyty läpi.
            
            If Lower( Right(file$, 4) ) = ".coh" Then
                // Nyt on oikea pääte tiedostolla, tarkistetaan vielä että signature on oikea.
                f = OpenToRead( file$ )
                    If ReadString2( f, 3 ) = "CoH" Then
                        // Oli oikea signature, ladataan tiedot muistiin.
                        version$ = Trim( ReadString2( f, 13 ) )
                        If version$ = COH_VERSION Then
                            // Tiedoston versiokin on oikea. Jatketaan lukemista :)
                            ReadString2( f, 16 ) // Ei vielä käytössä
                            mapName$ = Trim( ReadString2( f, 32 ) )
                            mapAuthor$ = Trim( ReadString2( f, 32 ) )
                            mapMD5Hash$ = Trim( ReadString2( f, 32 ) )
                            
                            // Sitten tarkistetaan ettei tekijä tai kartta ole tyhjä, eikä
                            // md5-hashin pituus ole väärä (ei-32). 
                            If mapName$ <> "" And mapAuthor$ <> "" And Len( mapMD5Hash$ ) <> 32 Then
                                // Nytten voidaan laittaa tiedot muistiin.
                                map.MAPS = New( MAPS )
                                map\filePath = CurrentDir() + file$
                                map\name = mapName$
                                map\author = mapAuthor$
                                map\hash = mapMD5Hash$
                                
                                didWeFindAMap = True
                            EndIf
                        EndIf
                    EndIf
                CloseFile f
            EndIf
        Forever
    EndSearch
    // Jösses mikä sisennysten sulkeminen :D
    
    Return didWeFindAMap
    
EndFunction 

//================================================================================
// Lataa yksittäisen kartan nyt tällä hetkellä olevaksi kartaksi.
// Funktio suorittaa heti tietojen lukemisen jälkeen tarkistuksen, ovatko
// kaikki palaset valideja. Jos eivät ole, tyhjennetään kartta muistista ja
// palautetaan False. Jos funktio onnistuu lataamaan kartan muistiin, palautetaan
// True.
//================================================================================
Function LoadMapFile( _filePath$ )

    ret = False

    // Tyhjätään kartta muistista.
    For bl.SPECIALBLOCKS = Each SPECIALBLOCKS
        If bl\img <> 0 Then DeleteImage bl\img
        Delete bl
    Next bl
    
    For map.MAPS = Each MAPS
        If map\filePath = _filePath$ Then
            f = OpenToRead( _filePath$ )
                // Luetaan tiedostosta kartan tiedot. Tarkistetaan samalla
                // että kartta on tiedoiltaan sama kuin muistissa oleva.
                If ReadString2( f, 3 ) = "CoH" Then
                    // Oli oikea signature, ladataan tiedot muistiin.
                    version$ = Trim( ReadString2( f, 13 ) )
                    If version$ = COH_VERSION Then
                        // Tiedoston versiokin on oikea. Jatketaan lukemista :)
                        ReadString2( f, 16 ) // Ei vielä käytössä
                        mapName$ = Trim( ReadString2( f, 32 ) )
                        mapAuthor$ = Trim( ReadString2( f, 32 ) )
                        mapMD5Hash$ = Trim( ReadString2( f, 32 ) )
                        
                        // Verrataan luettuja tietoja muistissa oleviin.
                        If mapName$ = map\name And mapAuthor$ = map\author And mapMD5Hash$ = map\hash Then
                            // Näyttäis olevan kaikki jeesh.
                            ret = True
                            
                            // Jatketaan tietojen hakua, kunnes tulee stoppi. 
                            // Seuraavat loput tavut sisältävät kartan datan.
                            While Not EOF( f )
                                sb.SPECIALBLOCKS = New( SPECIALBLOCKS )
                                sb\tileX = ReadByte( f )
                                sb\tileY = ReadByte( f )
                                sb\blockType = ReadByte( f )
                                sb\directions = ReadByte( f )
                                
                                colors$ = ReadString2( f, 9 )
                                
                                For i=1 To 9
                                    colorBit = ReadByte( f )
                                    If colorBit <> Asc(" ") Then
                                        sb\blockColors = sb\blockColors + colorBit + " "
                                    EndIf
                                Next i
                                
                                sb\blockColors = Trim( sb\blockColors )
                                
                                ReadString2( f, 3 ) // Ei vielä käytössä
                            Wend
                        EndIf
                    EndIf
                EndIf
            CloseFile f
        EndIf
    Next map
    // Toinen aika ihana sisennysten sulkeminen :D
    
    // Sitten tarkistetaan juuri muistiin ladatun kartan oikeellisuus.
    nonValid = ret
    For bl.SPECIALBLOCKS = Each SPECIALBLOCKS
        If CheckBlockValidity( bl\blockType, bl\blockColors, bl\directions ) = False Then
            nonValid = True
        ElseIf bl\tileX < 0 Or bl\tileX > MAPSIZE-1 Or bl\tileY < 0 Or bl\tileY > MAPSIZE-1 Then
            nonValid = True
        EndIf
        
        If nonValid Then Exit // Turha loopata enää, kun kartta ei ole validi.
    Next bl
    
    If nonValid Then
        // Tyhjätään kartta muistista, koska se ei ollut oikeellinen.
        For bl.SPECIALBLOCKS = Each SPECIALBLOCKS
            If bl\img <> 0 Then DeleteImage bl\img
            Delete bl
        Next bl
    EndIf
    
    If nonValid Then ret = False
    
    Return ret
EndFunction

//================================================================================
// Kirjoittaa merkkijonon tiedostoon tavu tavulta. 
// Parametrina annetaan avoimen tiedoston kahva ja merkkijono.
//================================================================================
Function WriteString2( _fileHandle, _str$ )
    For i=1 To Len(_str$)
        WriteByte _fileHandle, Asc( Mid( _str$, i, 1 ) )
    Next i
EndFunction 

//================================================================================
// Lukee tiedostosta halutun pituisen palasen ja palauttaa luetun datan
// merkkijonona. Parametrina annetaan avoimen tiedoston kahva ja datan pituus.
//================================================================================
Function ReadString2$( _fileHandle, _len )
    ret = ""
    For i=1 To _len
        If EOF( _fileHandle ) Then Exit // Estetään tiedoston yli lukeminen.
        ret = ret + Chr( ReadByte( _fileHandle ) )
    Next i
    
    Return ret
EndFunction 
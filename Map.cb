//********************************************************************************
// Map.cb
//
// Kartan piirtoon ja muuhun karttaan liittyvien yleisten toimintojen hoito.
//********************************************************************************

// Eri tiletyypit
Const TILE_TRACK     = 0
Const TILE_START     = 1
Const TILE_FINISH    = 2
Const TILE_ROADBLOCK = 3
Const TILE_PAINTER   = 4 'ei käytössä vielä
Const TILE_DIVIDER   = 5 'ei käytössä vielä
Const TILE_EMPTY     = 255


// Kolmiulotteinen taulukko raiteita varten. Ensimmäiset kaksi ulottuvuutta
// määräävät palikoiden x- ja y-koordinaatit, kolmas ulottuvuus sisältää
// tiedon siitä, kumpi palikka on päällä.
// Taulukkojen soluihin tallennettavat vakiot ovat samat kuin MAPS-taulukolla.
// (tileX, tileY, 0) = Päällä oleva palikka
// (tileX, tileY, 1) = Alla oleva palikka
Dim RAILS(MAPSIZE-1,MAPSIZE-1,1)
Const RAIL_TOP = 0
Const RAIL_UNDER = 1

// Kokoelma erikoispaloja (alku- ja loppupäät, maalauspalikat yms.) varten.
Type SPECIALBLOCKS
    Field tileX                 // Palasen x-tilekoordinaatti
    Field tileY                 // Palasen y-tilekoordinaatti
    Field blockType             // Palasen tyyppi
    Field directions            // Suunnat bitmaskina, 1:ylös, 2:oikea, 4:alas, 8:vasen
    Field blockColors As String // Palasen väri, kts. Media.cb ja yleiset värien vakiot. Eroteltu välilyönnein toisistaan.
    Field gameColors As String  // Pelissä oleva nykyinen väri.
    Field img                   // Kasattu kuva
EndType

// Taulukko, joka sisältää tiedot kaikista mahdollisista pisteistä joihin tarrautua.
// (x,y,0,0) = pystyriveillä sijaitsevan pisteen x-koordinaatti
// (x,y,0,1) = pystyriveillä sijaitsevan pisteen y-koordinaatti
// (x,y,1,0/1) = vaakariveillä sijaitsevien pisteiden koordinaatit
Dim GLUEPOINTS(MAPSIZE,MAPSIZE,1,1)

// Laitetaan GLUEPOINTS-taulukkoon oikeat arvot jo käynnistyksessä.
For x2=0 To MAPSIZE
    For y2=0 To MAPSIZE
        GLUEPOINTS(x2,y2,0,0)=x2*TILESIZE + BORDERSIZE
        GLUEPOINTS(x2,y2,0,1)=y2*TILESIZE - TILESIZE/2 + BORDERSIZE
        
        GLUEPOINTS(x2,y2,1,0)=x2*TILESIZE - TILESIZE/2 + BORDERSIZE
        GLUEPOINTS(x2,y2,1,1)=y2*TILESIZE + BORDERSIZE
    Next y2
Next x2
x2=0 : y2=0



//================================================================================
// Yksittäisen raiteen piirto
//================================================================================
Function DrawTrack( x, y )
    // Piirretään palaset. Ovela logiikka, jolla tarkistetaan,
    // ovatko molemmat kuvat päällepiirrettäviä (eli vastakkaiset
    // käännökset). If-lause on vähän turhan pitkä :/
    bothon = False
    If ( RAILS(x,y,0) = TR_TOPLEFT And RAILS(x,y,1) = TR_BOTTOMRIGHT ) Or ( RAILS(x,y,0) = TR_TOPRIGHT And RAILS(x,y,1) = TR_BOTTOMLEFT ) Or ( RAILS(x,y,1) = TR_TOPLEFT And RAILS(x,y,0) = TR_BOTTOMRIGHT ) Or ( RAILS(x,y,1) = TR_TOPRIGHT And RAILS(x,y,0) = TR_BOTTOMLEFT ) Then
        bothon = True
    EndIf

    
    DrawImage RAILIMGS( RAILS(x,y,1),Not bothon ), x*TILESIZE+BORDERSIZE, y*TILESIZE+BORDERSIZE
    DrawImage RAILIMGS( RAILS(x,y,0),0 ), x*TILESIZE+BORDERSIZE, y*TILESIZE+BORDERSIZE
EndFunction

//================================================================================
// Piirretään kaikki erikoispalaset.
//================================================================================
Function DrawBlocks()
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        // Jos palasella ei ole kuvaa, luodaan se. (Editor.cb)
        If sb\img = 0 Then
            sb\img = AssembleBlock( sb\blockType, sb\blockColors, sb\directions )
        EndIf
        DrawImage sb\img, sb\tileX*TILESIZE+BORDERSIZE, sb\tileY*TILESIZE+BORDERSIZE
    Next sb
EndFunction

//================================================================================
// Yksittäisen raiteen poisto.
//================================================================================
Function DeleteTrack( _tileX, _tileY )
    RAILS( _tileX, _tileY, 0 ) = TR_EMPTY
    RAILS( _tileX, _tileY, 1 ) = TR_EMPTY
    
    Return True
EndFunction

//================================================================================
// Palikan poisto (kts. SPECIALBLOCKS-kokoelma).
// Palauttaa False, jos poisto epäonnistui (palasta ei löytynyt koordinaateista),
// muulloin True.
//================================================================================
Function DeleteBlock( _tileX, _tileY )
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        If sb\tileX = _tileX And sb\tileY = _tileY Then
            If sb\img<>0 Then DeleteImage sb\img
            Delete sb
        EndIf
    Next sb
    
    Return False
EndFunction

//===============================================================================
// Onko hiiri laatan päällä
//===============================================================================
Function MouseOverTile( x, y )
    Return (MouseX() > x*TILESIZE+BORDERSIZE And MouseY() > y*TILESIZE+BORDERSIZE And MouseX() < (x+1)*TILESIZE+BORDERSIZE And MouseY() < (y+1)*TILESIZE+BORDERSIZE )
EndFunction 

//===============================================================================
// Tarkista laatan tyyppi tilekoordinaattien mukaan.
//===============================================================================
Function TileType( _tileX, _tileY )
    If RAILS( _tileX, _tileY, RAIL_TOP ) <> TR_EMPTY Then
        Return TILE_TRACK
    EndIf
    
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        If sb\tileX = _tileX And sb\tileY = _tileY Then
            Return sb\blockType
        EndIf
    Next sb
    
    Return TILE_EMPTY
EndFunction 

//===============================================================================
// Tarkista laatan tyyppi ruutukoordinaattien mukaan.
//===============================================================================
Function TileType2( _x, _y )
    tileX = Min( Max( ( _x - BORDERSIZE ) / TILESIZE, 0 ), MAPSIZE-1 )
    tileY = Min( Max( ( _y - BORDERSIZE ) / TILESIZE, 0 ), MAPSIZE-1 )
    
    If RAILS( tileX, tileY, RAIL_TOP ) <> TR_EMPTY Then
        Return TILE_TRACK
    EndIf
    
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        If sb\tileX = tileX And sb\tileY = tileY Then
            Return sb\blockType
        EndIf
    Next sb
    
    Return TILE_EMPTY
EndFunction 

//===============================================================================
// Tarkista raiteen tyyppi tilekoordinaattien mukaan.
//===============================================================================
Function TrackType( _tileX, _tileY )
    Return RAILS( _tileX, _tileY, RAIL_TOP )
EndFunction

//===============================================================================
// Funktio, joka kokoaa laatan ja palauttaa luodun kuvan.
// Toisena parametrina (_colors$) annetaan laatan osien värit välilyonnein
// eroteltuna merkkijonona.
//===============================================================================
Function AssembleBlock( _type, _colors$, _directions, _originalColors$ = "" )
    img = MakeImage( TILESIZE, TILESIZE )
    
    // Jos _originalColors$ -parametri sisältää jotain tietoa, asetetaan eri
    // värien koko manuaalisesti eriksi.
    If _originalColors$ <> "" Then
        tmp = CountWords( _originalColors$ )
        If tmp = 1 Then 
            sizeOverride = EI_SIZE_1x1
        ElseIf tmp <= 4 Then
            sizeOverride = EI_SIZE_2x2
        Else
            sizeOverride = EI_SIZE_3x3
        EndIf
    Else
        sizeOverride = -1
    EndIf
    
    // Lasketaan valmiiksi koordinaatit ulos- ja sisäännuolille
    centerX = (ImageWidth(BLOCKIMAGES( BLI_BORDERS ))-ImageWidth(BLOCKIMAGES( BLI_EXIT_UP )))/2
    centerY = (ImageHeight(BLOCKIMAGES( BLI_BORDERS ))-ImageHeight(BLOCKIMAGES( BLI_EXIT_LEFT )))/2
    rightX = ImageWidth(BLOCKIMAGES( BLI_BORDERS ))-ImageWidth(BLOCKIMAGES( BLI_EXIT_LEFT ))
    bottomY = ImageHeight(BLOCKIMAGES( BLI_BORDERS ))-ImageHeight(BLOCKIMAGES( BLI_EXIT_UP ))
    
    // Piirretään este.
    If _type = TILE_ROADBLOCK Then
        srcImg = BLOCKIMAGES( BLI_ROADBLOCK )
        CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), 0, 0, Image(srcImg), Image(img)
    EndIf

    // Palasten määrä saadaan selville _extra-parametrin välilyöntien määrästä.
    // _extra-parametri sisältää palasten värit välilyönnein eroteltuna, alkaen
    // vasemman ylänurkan väristä.
    _colors$ = Trim( _colors$ )
    amount = CountWords( _colors$ )
    
    // Jos määrä > 9, on palasia liikaa eikä kuvaa voida piirtää.
    // Jos määrä on puolestaan 0, ei palasia ole.
    // Asetetaan parametri _type osoittaman olemattomaan palikkaan.
    // Näin ei piirretä mitään kuvaa ja palautetaan tyhjä kuva.
    // Näin peli ei kaadu DrawImage failed -ilmoitukseen. :)
    If amount > 9 Or amount < 0 Then
        _type = -1
    Else
        // Tarkistetaan, että _extra-parametrissa ei ole vääriä arvoja.
        For i=0 To amount
            If Int( GetWord( _colors$, i ) ) < 0 Or Int( GetWord( _colors$, i ) ) > TR_GENERAL Then
                _type = -1
                Exit
            EndIf
        Next i
    EndIf

    If _type = TILE_START Then
        
        // Lisätään kuvaan aluksi reunukset
        srcImg = BLOCKIMAGES( BLI_BORDERS )
        CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), 0, 0, Image(srcImg), Image(img)
        
        // Lisätään oikeanväriset symbolit kuvaan
        If sizeOverride = -1 And amount = 1 Or sizeOverride = EI_SIZE_1x1 Then
            srcImg = ENDIMAGES( Int( _colors$ ), EI_SIZE_1x1, EI_STARTIMG )
            CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), 6, 6, Image(srcImg), Image(img)
        EndIf
        If sizeOverride = -1 And ( amount > 1 And amount <= 4 ) Or sizeOverride = EI_SIZE_2x2 Then
            For i=0 To amount-1
                srcImg = ENDIMAGES( Int( GetWord( _colors$, i+1 ) ), EI_SIZE_2x2, EI_STARTIMG )
                xPos = 6+(i Mod 2)*28
                yPos = 6+( i>=2 )*28
                CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), xPos, yPos, Image(srcImg), Image(img)
            Next i
        EndIf
        If sizeOverride = -1 And ( amount > 4 And amount <= 9 ) Or sizeOverride = EI_SIZE_3x3 Then
            For i=0 To amount-1
                srcImg = ENDIMAGES( Int( GetWord( _colors$, i+1 ) ), EI_SIZE_3x3, EI_STARTIMG )
                xPos = 6+(i Mod 3)*18
                yPos = 6+( (i>=3)+(i>=6) )*18
                CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), xPos, yPos, Image(srcImg), Image(img)
            Next i
        EndIf
        
        // Piirretään lopuksi uloskäynnit bitmaskin määräämiin paikkoihin.
        DrawToImage img
            If BinAnd(_directions,1)=1 Then DrawImage BLOCKIMAGES( BLI_EXIT_UP ), centerX, 0
            If BinAnd(_directions,2)=2 Then DrawImage BLOCKIMAGES( BLI_EXIT_RIGHT ), rightX, centerY
            If BinAnd(_directions,4)=4 Then DrawImage BLOCKIMAGES( BLI_EXIT_BOTTOM ), centerX, bottomY
            If BinAnd(_directions,8)=8 Then DrawImage BLOCKIMAGES( BLI_EXIT_LEFT ), 0, centerY
        DrawToScreen
    ElseIf _type = TILE_FINISH
        
        // Lisätään kuvaan aluksi reunukset
        srcImg = BLOCKIMAGES( BLI_BORDERS )
        CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), 0, 0, Image(srcImg), Image(img)
        
        // Lisätään oikeanväriset symbolit kuvaan
        If sizeOverride = -1 And amount = 1 Or sizeOverride = EI_SIZE_1x1 Then
            srcImg = ENDIMAGES( Int( _colors$ ), EI_SIZE_1x1, EI_ENDIMG )
            CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), 6, 6, Image(srcImg), Image(img)
        EndIf
        If sizeOverride = -1 And ( amount > 1 And amount <= 4 ) Or sizeOverride = EI_SIZE_2x2 Then
            For i=0 To amount-1
                srcImg = ENDIMAGES( Int( GetWord( _colors$, i+1 ) ), EI_SIZE_2x2, EI_ENDIMG )
                xPos = 6+(i Mod 2)*28
                yPos = 6+( i>=2 )*28
                CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), xPos, yPos, Image(srcImg), Image(img)
            Next i
        EndIf
        If sizeOverride = -1 And ( amount > 4 And amount <= 9 ) Or sizeOverride = EI_SIZE_3x3 Then
            For i=0 To amount-1
                srcImg = ENDIMAGES( Int( GetWord( _colors$, i+1 ) ), EI_SIZE_3x3, EI_ENDIMG )
                xPos = 6+(i Mod 3)*18
                yPos = 6+( (i>=3)+(i>=6) )*18
                CopyBox 0, 0, ImageWidth(srcImg), ImageHeight(srcImg), xPos, yPos, Image(srcImg), Image(img)
            Next i
        EndIf
        
        // Piirretään lopuksi sisäänkäynnit bitmaskin määräämiin paikkoihin.
        DrawToImage img
            If BinAnd(_directions,1)=1 Then DrawImage BLOCKIMAGES( BLI_ENTRANCE_UP ), centerX, 0
            If BinAnd(_directions,2)=2 Then DrawImage BLOCKIMAGES( BLI_ENTRANCE_RIGHT ), rightX, centerY
            If BinAnd(_directions,4)=4 Then DrawImage BLOCKIMAGES( BLI_ENTRANCE_BOTTOM ), centerX, bottomY
            If BinAnd(_directions,8)=8 Then DrawImage BLOCKIMAGES( BLI_ENTRANCE_LEFT ), 0, centerY
        DrawToScreen
    EndIf
    
    Return img
EndFunction 

//===============================================================================
// Onko laatta sääntöjen mukainen. Huomaa, että jos funktiolle annetaan
// parametrina raide, on palautusarvo False.
//===============================================================================
Function CheckBlockValidity( _type, _colors$, _directions )

    If _type = TILE_TRACK Then Return False 
    If _type = TILE_EMPTY Then Return False
    If _type = TILE_ROADBLOCK Then Return True
    
    If _type = TILE_PAINTER Then Return False // Ei vielä tehty
    If _type = TILE_DIVIDER Then Return False // Ei vielä tehty
    
    amount = CountWords( _colors$ )
    
    If amount < 1 Or amount > 9 Then Return False
    
    For i=1 To amount
        check = Int( GetWord( _colors$, i ) )
        If check = TR_GENERAL Or check > TR_BROWN Or check < 0 Then Return False
    Next i
    
    If _type = TILE_START
        If BinAnd(_directions,1) Then
            If BinAnd(_directions,2) Or BinAnd(_directions,4) Or BinAnd(_directions,8) Then Return False
            Return True
        ElseIf BinAnd(_directions,2) Then
            If BinAnd(_directions,1) Or BinAnd(_directions,4) Or BinAnd(_directions,8) Then Return False
            Return True
        ElseIf BinAnd(_directions,4) Then
            If BinAnd(_directions,1) Or BinAnd(_directions,2) Or BinAnd(_directions,8) Then Return False
            Return True
        ElseIf BinAnd(_directions,8) Then
            If BinAnd(_directions,1) Or BinAnd(_directions,2) Or BinAnd(_directions,4) Then Return False
            Return True
        EndIf
        Return False
    EndIf
    
    If _type = TILE_FINISH Then
        If BinAnd(_directions,1) Or BinAnd(_directions,2) Or BinAnd(_directions,4) Or BinAnd(_directions,8) Then Return True
        Return False
    EndIf
    
    Return False
EndFunction


//********************************************************************************
// Map.cb
//
// Kartan piirtoon ja muuhun karttaan liittyvien yleisten toimintojen hoito.
//********************************************************************************

// Eri tiletyypit
Const TILE_TRACK     = 0
Const TILE_START     = 1
Const TILE_FINISH    = 2
Const TILE_ROADBLOCK = 3
Const TILE_PAINTER   = 4 'ei käytössä vielä
Const TILE_DIVIDER   = 5 'ei käytössä vielä
Const TILE_EMPTY     = 255


// Kolmiulotteinen taulukko raiteita varten. Ensimmäiset kaksi ulottuvuutta
// määräävät palikoiden x- ja y-koordinaatit, kolmas ulottuvuus sisältää
// tiedon siitä, kumpi palikka on päällä.
// Taulukkojen soluihin tallennettavat vakiot ovat samat kuin MAPS-taulukolla.
// (tileX, tileY, 0) = Alla oleva palikka
// (tileX, tileY, 1) = Päällä oleva palikka
Dim RAILS(MAPSIZE-1,MAPSIZE-1,1)

// Kokoelma erikoispaloja (alku- ja loppupäät, maalauspalikat yms.) varten.
Type SPECIALBLOCKS
    Field tileX      // Palasen x-tilekoordinaatti
    Field tileY      // Palasen y-tilekoordinaatti
    Field blockType  // Palasen tyyppi
    Field blockColor // Palasen väri, kts. Media.cb ja yleiset värien vakiot.
    Field directions // Suunnat bitmaskina, 1:ylös, 2:oikea, 4:alas, 8:vasen
    Field amount     // Palasen sisältämä määrä, esim. lähtevien junien määrä.
    Field img        // Kasattu kuva
EndType

// Taulukko, joka sisältää tiedot kaikista mahdollisista pisteistä joihin tarrautua.
// (x,y,0,0) = pystyriveillä sijaitsevan pisteen x-koordinaatti
// (x,y,0,1) = pystyriveillä sijaitsevan pisteen y-koordinaatti
// (x,y,1,0/1) = vaakariveillä sijaitsevien pisteiden koordinaatit
Dim GLUEPOINTS(MAPSIZE,MAPSIZE,1,1)

// Laitetaan GLUEPOINTS-taulukkoon oikeat arvot jo käynnistyksessä.
For x2=0 To MAPSIZE
    For y2=0 To MAPSIZE
        GLUEPOINTS(x2,y2,0,0)=x2*TILESIZE + BORDERSIZE
        GLUEPOINTS(x2,y2,0,1)=y2*TILESIZE - TILESIZE/2 + BORDERSIZE
        
        GLUEPOINTS(x2,y2,1,0)=x2*TILESIZE - TILESIZE/2 + BORDERSIZE
        GLUEPOINTS(x2,y2,1,1)=y2*TILESIZE + BORDERSIZE
    Next y2
Next x2
x2=0 : y2=0



//================================================================================
// Yksittäisen raiteen piirto
//================================================================================
Function DrawTrack( x, y )
    // Piirretään palaset. Ovela logiikka, jolla tarkistetaan,
    // ovatko molemmat kuvat päällepiirrettäviä (eli vastakkaiset
    // käännökset). If-lause on vähän turhan pitkä :/
    bothon = False
    If ( RAILS(x,y,0) = TR_TOPLEFT And RAILS(x,y,1) = TR_BOTTOMRIGHT ) Or ( RAILS(x,y,0) = TR_TOPRIGHT And RAILS(x,y,1) = TR_BOTTOMLEFT ) Or ( RAILS(x,y,1) = TR_TOPLEFT And RAILS(x,y,0) = TR_BOTTOMRIGHT ) Or ( RAILS(x,y,1) = TR_TOPRIGHT And RAILS(x,y,0) = TR_BOTTOMLEFT ) Then
        bothon = True
    EndIf

    
    DrawImage RAILIMGS( RAILS(x,y,1),Not bothon ), x*TILESIZE+BORDERSIZE, y*TILESIZE+BORDERSIZE
    DrawImage RAILIMGS( RAILS(x,y,0),0 ), x*TILESIZE+BORDERSIZE, y*TILESIZE+BORDERSIZE
EndFunction

//================================================================================
// Piirretään kaikki erikoispalaset.
//================================================================================
Function DrawBlocks()
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        img = False
        If sb\blockType = TILE_START Then
            img = ENDIMAGES( sb\blockColor, EI_SIZE_1x1, EI_STARTIMG )
        ElseIf sb\blockType = TILE_FINISH Then
            img = ENDIMAGES( sb\blockColor, EI_SIZE_1x1, EI_ENDIMG )
        EndIf
        
        If img Then
            DrawImage img, x*TILESIZE+BORDERSIZE, y*TILESIZE+BORDERSIZE
        EndIf
    Next sb
EndFunction

//================================================================================
// Yksittäisen raiteen poisto.
//================================================================================
Function DeleteTrack( _tileX, _tileY )
    RAILS( _tileX, _tileY, 0 ) = TR_EMPTY
    RAILS( _tileX, _tileY, 1 ) = TR_EMPTY
    
    Return True
EndFunction

//================================================================================
// Palikan poisto (kts. SPECIALBLOCKS-kokoelma).
// Palauttaa False, jos poisto epäonnistui (palasta ei löytynyt koordinaateista),
// muulloin True.
//================================================================================
Function DeleteBlock( _tileX, _tileY )
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        If sb\tileX = _tileX And sb\tileY = _tileY Then
            If sb\img Then DeleteImage sb\img
            Delete sb
            Return True
        EndIf
    Next sb
    
    Return False
EndFunction

//===============================================================================
// Onko hiiri laatan päällä
//===============================================================================
Function MouseOverTile( x, y )
    Return (MouseX() > x*TILESIZE+BORDERSIZE And MouseY() > y*TILESIZE+BORDERSIZE And MouseX() < (x+1)*TILESIZE+BORDERSIZE And MouseY() < (y+1)*TILESIZE+BORDERSIZE )
EndFunction 

//===============================================================================
// Tarkista laatan tyyppi
//===============================================================================
Function TileType( _tileX, _tileY )
    If RAILS( _tileX, _tileY,1 ) <> TR_EMPTY Then
        Return TILE_TRACK
    EndIf
    
    For sb.SPECIALBLOCKS = Each SPECIALBLOCKS
        If sb\tileX = _tileX And sb\tileY = _tileY Then
            Return sb\blockType
        EndIf
    Next sb
    
    Return TILE_EMPTY
EndFunction 

//===============================================================================
// Onko laatta sääntöjen mukainen. Huomaa, että jos funktiolle annetaan
// parametrina raide, on palautusarvo False.
//===============================================================================
Function CheckBlockValidity( _type, _color, _directions, _amount )

    If _type = TILE_TRACK Then Return False 
    If _type = TILE_EMPTY Then Return True
    If _type = TILE_ROADBLOCK Then Return True
    
    If _color = TR_GENERAL Or _color > TR_BROWN Then Return False
    
    If _type = TILE_PAINTER Then Return True
    If _type = TILE_DIVIDER Then Return True
    
    
    If _amount > 9 Or _amount < 1 Then Return False
    
    If _type = TILE_START
        If BinAnd(_directions,1) Then
            If BinAnd(_directions,2) Or BinAnd(_directions,4) Or BinAnd(_directions,8) Then Return False
        ElseIf BinAnd(_directions,2) Then
            If BinAnd(_directions,1) Or BinAnd(_directions,4) Or BinAnd(_directions,8) Then Return False
        ElseIf BinAnd(_directions,4) Then
            If BinAnd(_directions,1) Or BinAnd(_directions,2) Or BinAnd(_directions,8) Then Return False
        ElseIf BinAnd(_directions,8) Then
            If BinAnd(_directions,1) Or BinAnd(_directions,2) Or BinAnd(_directions,4) Then Return False
        EndIf
        Return True
    EndIf
        
    If _type = TILE_FINISH Then
        If _directions=1 Or _directions=2 Or _directions=4 Or _directions=8 Then Return True
        Return False
    EndIf
    
    Return False
EndFunction

//===============================================================================
// Funktio, joka kokoaa laatan ja palauttaa luodun kuvan.
//===============================================================================
Function AssembleBlock( _type, _color, _directions, _amount )
    img = MakeImage( TILESIZE, TILESIZE )
    
    DrawToImage img
        If _type = TILE_ROADBLOCK Then
            DrawImage BLOCKIMAGES( BLI_ROADBLOCK ), 0, 0
        Else
            // RoadBlockille ei piirretä reunoja.
            DrawImage BLOCKIMAGES( BLI_BORDERS ), 0, 0
        EndIf
        If _type = TILE_START Then
            If _amount = 1 Then
                DrawImage ENDIMAGES( _color, EI_SIZE_1x1, EI_STARTIMG ), 6, 6
            ElseIf _amount <= 4 Then
                For i=0 To _amount-1
                    xPos = 6+(i Mod 2)*28
                    yPos = ( i>=2 )*28
                    DrawImage ENDIMAGES( _color, EI_SIZE_2x2, EI_STARTIMG), xPos, yPos
                Next i
            ElseIf _amount <= 9 Then
                For i=0 To _amount-1
                    xPos = 6+(i Mod 3)*18
                    yPos = (( i>=3 )+( i>=6 ))*18
                    DrawImage ENDIMAGES( _color, EI_SIZE_3x3, EI_STARTIMG), xPos, yPos
                Next i
            Else
                MakeError "There's an invalid block! How can it be?"+Chr(10)+Chr(13)+"This is a bug, please report it and post this code: error1"
            EndIf
            If BinAnd(_directions,1)=1 Then DrawImage BLOCKIMAGES( BLI_EXIT_UP ), 0, 0
            If BinAnd(_directions,2)=2 Then DrawImage BLOCKIMAGES( BLI_EXIT_RIGHT ), 0, 0
            If BinAnd(_directions,4)=4 Then DrawImage BLOCKIMAGES( BLI_EXIT_BOTTOM ), 0, 0
            If BinAnd(_directions,8)=8 Then DrawImage BLOCKIMAGES( BLI_EXIT_LEFT ), 0, 0
        ElseIf _type = TILE_END
            If _amount = 1 Then
                DrawImage ENDIMAGES( _color, EI_SIZE_1x1, EI_STARTIMG ), 6, 6
            ElseIf _amount <= 4 Then
                For i=0 To _amount-1
                    xPos = 6+(i Mod 2)*28
                    yPos = ( i>=2 )*28
                    DrawImage ENDIMAGES( _color, EI_SIZE_2x2, EI_STARTIMG), xPos, yPos
                Next i
            ElseIf _amount <= 9 Then
                For i=0 To _amount-1
                    xPos = 6+(i Mod 3)*18
                    yPos = (( i>=3 )+( i>=6 ))*18
                    DrawImage ENDIMAGES( _color, EI_SIZE_2x2, EI_STARTIMG), xPos, yPos
                Next i
            Else
                MakeError "There's an invalid block! How can it be?"+Chr(10)+Chr(13)+"This is a bug, please report it and post this code: error2"
            EndIf
            If BinAnd(_directions,1) Then DrawImage BLOCKIMAGES( BLI_ENTRANCE_UP ), 0, 0
            If BinAnd(_directions,2) Then DrawImage BLOCKIMAGES( BLI_ENTRANCE_RIGHT ), 0, 0
            If BinAnd(_directions,4) Then DrawImage BLOCKIMAGES( BLI_ENTRANCE_BOTTOM ), 0, 0
            If BinAnd(_directions,8) Then DrawImage BLOCKIMAGES( BLI_ENTRANCE_LEFT ), 0, 0
        EndIf
    DrawToScreen
    
    Return img
EndFunction 